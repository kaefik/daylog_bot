"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–æ–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
–°–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
"""

from datetime import date, timedelta
from enum import Enum
from typing import Dict, Any, Optional, Callable, List, Union, Tuple
from telethon import events, Button, TelegramClient

from core.database.manager import DatabaseManager
from cfg.config_tlg import DAYLOG_DB_PATH


class FormState(str, Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    WAITING_MOOD = "waiting_mood"
    WAITING_WEATHER = "waiting_weather"
    WAITING_LOCATION = "waiting_location"
    WAITING_EVENTS = "waiting_events"


class DiaryManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–æ–≤—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
    –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
    """
    
    # –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
    _user_states: Dict[int, FormState] = {}
    _user_form_data: Dict[int, Dict[str, Any]] = {}
    
    def __init__(self, client, logger, i18n=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞
        
        Args:
            client: –ö–ª–∏–µ–Ω—Ç Telegram (tlgbot)
            logger: –õ–æ–≥–≥–µ—Ä
            i18n: –û–±—ä–µ–∫—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        self.client = client
        self.logger = logger
        self.i18n = i18n
        self.db = DatabaseManager(db_path=DAYLOG_DB_PATH)
    
    def _t(self, key: str, lang: str = "ru", **kwargs) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        
        Args:
            key: –ö–ª—é—á —Å—Ç—Ä–æ–∫–∏
            lang: –Ø–∑—ã–∫
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if self.i18n:
            result = self.i18n.t(key, lang=lang, **kwargs)
            if result:
                return result
                
        # –ó–∞–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
        fallbacks = {
            'entry_not_found': "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            'not_specified': "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
            'entry_title': f"üìù –ó–∞–ø–∏—Å—å –æ—Ç {kwargs.get('date', '')}",
            'entry_mood': f"üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {kwargs.get('mood', '')}",
            'entry_weather': f"üå§ –ü–æ–≥–æ–¥–∞: {kwargs.get('weather', '')}",
            'entry_location': f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {kwargs.get('location', '')}",
            'entry_events': f"üìå –°–æ–±—ã—Ç–∏—è: {kwargs.get('events', '')}",
            'form_invalid_state': "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã",
            'form_first_step': "–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥",
            'type_cancel_to_abort': "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.",
            'creation_canceled': "üëå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            'today_entry_created': "–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
            'today_entry_updated': "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            'today_entry_error': "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏",
            'today_entry_update_error': "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏",
            'edit_events_prompt': f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{kwargs.get('events', '')}\n\n–û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            'today_events_prompt': "–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            'edit_location_prompt': f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{kwargs.get('location', '')}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            'today_location_prompt': "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
            'today_location_manual': "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            'events_replace_prompt': f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{kwargs.get('events', '')}\"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π:",
            'events_append_prompt': f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{kwargs.get('events', '')}\"\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É:",
            'events_edit_prompt': f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{kwargs.get('events', '')}\"\n\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:",
            'mood_excellent': "–û—Ç–ª–∏—á–Ω–æ",
            'mood_good': "–•–æ—Ä–æ—à–æ", 
            'mood_normal': "–ù–æ—Ä–º–∞–ª—å–Ω–æ", 
            'mood_bad': "–ü–ª–æ—Ö–æ", 
            'mood_terrible': "–£–∂–∞—Å–Ω–æ",
            'weather_sunny': "–°–æ–ª–Ω–µ—á–Ω–æ",
            'weather_cloudy': "–û–±–ª–∞—á–Ω–æ",
            'weather_rainy': "–î–æ–∂–¥—å",
            'weather_snowy': "–°–Ω–µ–≥",
            'weather_foggy': "–¢—É–º–∞–Ω",
            'location_home': "–î–æ–º",
            'location_work': "–†–∞–±–æ—Ç–∞",
            'location_street': "–£–ª–∏—Ü–∞",
            'btn_manual': "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
            'btn_skip': "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            'btn_back': "–ù–∞–∑–∞–¥",
            'btn_cancel': "–û—Ç–º–µ–Ω–∞",
            'btn_replace': "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç",
            'btn_append': "–î–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—Å—Ç—É",
            'btn_edit_text': "–ü—Ä–∞–≤–∫–∞",
            'btn_edit': "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            'btn_edit_events_only': "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ",
            'today_entry_exists_edit': "–ó–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë?",
            'yesterday_entry_exists_edit': "–ó–∞–ø–∏—Å—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë?",
            'edit_canceled': "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        }
        
        return fallbacks.get(key, key)
    
    async def display_entry_content(self, event, user_id: int, entry_date: date, lang: str = "ru") -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            entry_date: –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
            lang: –Ø–∑—ã–∫
        """
        try:
            entry = self.db.get_diary_entry(user_id, entry_date)
            
            if not entry:
                await event.respond(self._t('entry_not_found', lang=lang))
                return
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∑–∞–ø–∏—Å–∏
            mood = entry.get("mood") or self._t('not_specified', lang=lang)
            weather = entry.get("weather") or self._t('not_specified', lang=lang)
            location = entry.get("location") or self._t('not_specified', lang=lang)
            events = entry.get("events") or self._t('not_specified', lang=lang)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            date_str = str(entry_date)
            message = self._t('entry_title', lang=lang, date=date_str) + "\n\n"
            message += self._t('entry_mood', lang=lang, mood=mood) + "\n"
            message += self._t('entry_weather', lang=lang, weather=weather) + "\n"
            message += self._t('entry_location', lang=lang, location=location) + "\n"
            message += self._t('entry_events', lang=lang, events=events) + "\n"
            
            await event.respond(message, parse_mode='markdown')
        except Exception as e:
            import traceback
            traceback_str = traceback.format_exc()
            self.logger.error(f"ERROR displaying entry: {traceback_str}")
            await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
    
    def get_mood_keyboard(self, lang: str = "ru", prefix: str = "") -> List[List[Button]]:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        
        Args:
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'yesterday_')
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        """
        return [
            [
                Button.inline(self._t('mood_excellent', lang=lang), data=f"{prefix}mood_excellent"),
                Button.inline(self._t('mood_good', lang=lang), data=f"{prefix}mood_good"),
            ],
            [
                Button.inline(self._t('mood_normal', lang=lang), data=f"{prefix}mood_normal"),
                Button.inline(self._t('mood_bad', lang=lang), data=f"{prefix}mood_bad"),
            ],
            [
                Button.inline(self._t('mood_terrible', lang=lang), data=f"{prefix}mood_terrible"),
            ],
            [
                Button.inline(self._t('btn_skip', lang=lang), data=f"{prefix}mood_skip"),
                Button.inline(self._t('btn_cancel', lang=lang), data=f"cancel_creation"),
            ]
        ]

    def get_weather_keyboard(self, lang: str = "ru", prefix: str = "") -> List[List[Button]]:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–≥–æ–¥—ã
        
        Args:
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        """
        return [
            [
                Button.inline(self._t('weather_sunny', lang=lang), data=f"{prefix}weather_sunny"),
                Button.inline(self._t('weather_cloudy', lang=lang), data=f"{prefix}weather_cloudy"),
            ],
            [
                Button.inline(self._t('weather_rainy', lang=lang), data=f"{prefix}weather_rainy"),
                Button.inline(self._t('weather_snowy', lang=lang), data=f"{prefix}weather_snowy"),
            ],
            [
                Button.inline(self._t('weather_foggy', lang=lang), data=f"{prefix}weather_foggy"),
                Button.inline(self._t('btn_manual', lang=lang), data=f"{prefix}weather_manual"),
            ],
            [
                Button.inline(self._t('btn_skip', lang=lang), data=f"{prefix}weather_skip"),
                Button.inline(self._t('btn_back', lang=lang), data=f"{prefix}weather_back"),
                Button.inline(self._t('btn_cancel', lang=lang), data=f"cancel_creation"),
            ]
        ]

    def get_location_keyboard(self, lang: str = "ru", prefix: str = "") -> List[List[Button]]:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        """
        return [
            [
                Button.inline(self._t('location_home', lang=lang), data=f"{prefix}location_home"),
                Button.inline(self._t('location_work', lang=lang), data=f"{prefix}location_work"),
            ],
            [
                Button.inline(self._t('location_street', lang=lang), data=f"{prefix}location_street"),
                Button.inline(self._t('btn_manual', lang=lang), data=f"{prefix}location_manual"),
            ],
            [
                Button.inline(self._t('btn_skip', lang=lang), data=f"{prefix}location_skip"),
                Button.inline(self._t('btn_back', lang=lang), data=f"{prefix}location_back"),
                Button.inline(self._t('btn_cancel', lang=lang), data=f"cancel_creation"),
            ]
        ]

    def get_events_keyboard(self, lang: str = "ru", prefix: str = "", edit_mode: bool = False) -> List[List[Button]]:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏–π
        
        Args:
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            edit_mode: –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        """
        buttons = [
            [
                Button.inline(self._t('btn_skip', lang=lang), data=f"{prefix}events_skip"),
                Button.inline(self._t('btn_back', lang=lang), data=f"{prefix}events_back"),
                Button.inline(self._t('btn_cancel', lang=lang), data="cancel_creation"),
            ]
        ]
        
        # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∏—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–ü—Ä–∞–≤–∫–∞"
        if edit_mode:
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫
            self.logger.debug(f"Creating edit mode buttons with data: {prefix}events_replace, {prefix}events_append and {prefix}events_edit")
            
            replace_btn = Button.inline(self._t('btn_replace', lang=lang), data=f"{prefix}events_replace")
            append_btn = Button.inline(self._t('btn_append', lang=lang), data=f"{prefix}events_append")
            edit_btn = Button.inline(self._t('btn_edit_text', lang=lang), data=f"{prefix}events_edit")
            buttons.insert(0, [replace_btn, append_btn, edit_btn])
            
        return buttons
    
    def get_user_state(self, user_id: int) -> Optional[FormState]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É
        """
        return self._user_states.get(user_id)
    
    def set_user_state(self, user_id: int, state: FormState) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        """
        self._user_states[user_id] = state
    
    def get_user_form_data(self, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self._user_form_data:
            self._user_form_data[user_id] = {}
        return self._user_form_data[user_id]
    
    def set_user_form_data(self, user_id: int, data: Dict[str, Any]) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        """
        self._user_form_data[user_id] = data
    
    def update_user_form_data(self, user_id: int, **kwargs) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            **kwargs: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        if user_id not in self._user_form_data:
            self._user_form_data[user_id] = {}
        self._user_form_data[user_id].update(kwargs)
    
    def clear_user_data(self, user_id: int) -> None:
        """
        –û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self._user_states:
            del self._user_states[user_id]
        if user_id in self._user_form_data:
            del self._user_form_data[user_id]
    
    async def start_form(self, event, user_id: int, entry_date: date, lang: str = "ru", prefix: str = "") -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            entry_date: –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        """
        # –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        self.set_user_state(user_id, FormState.WAITING_MOOD)
        self.set_user_form_data(user_id, {"entry_date": entry_date})
        
        await event.reply(
            self._t('today_mood_prompt', lang=lang) or "–ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
            buttons=self.get_mood_keyboard(lang, prefix)
        )
    
    async def start_edit_form(self, event, user_id: int, entry_date: date, lang: str = "ru", prefix: str = "", events_only: bool = False) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            entry_date: –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            events_only: –¢–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        """
        try:
            entry = self.db.get_diary_entry(user_id, entry_date)
            
            if not entry:
                await event.edit(self._t('entry_not_found', lang=lang))
                return
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            form_data = {
                "entry_date": entry_date,
                "edit_mode": True,
                "mood": entry.get("mood", ""),
                "weather": entry.get("weather", ""),
                "location": entry.get("location", ""),
                "events": entry.get("events", "")
            }
            
            self.set_user_form_data(user_id, form_data)
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —ç—Ç–æ–º—É —à–∞–≥—É
            if events_only:
                self.set_user_state(user_id, FormState.WAITING_EVENTS)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
                current_events = form_data.get("events") or self._t('not_specified', lang=lang)
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.logger.debug(f"Showing events form with edit_mode=True. User ID: {user_id}, Current events: {current_events}")
                
                edit_events_message = self._t('edit_events_prompt', lang=lang, events=current_events)
                await event.edit(
                    edit_events_message,
                    buttons=self.get_events_keyboard(lang, prefix, edit_mode=True)
                )
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                self.set_user_state(user_id, FormState.WAITING_MOOD)
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                current_mood = form_data.get("mood") or self._t('not_specified', lang=lang)
                
                edit_mood_message = self._t('edit_mood_prompt', lang=lang, mood=current_mood) or f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_mood}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:"
                await event.edit(
                    edit_mood_message,
                    buttons=self.get_mood_keyboard(lang, prefix)
                )
        except Exception as e:
            import traceback
            traceback_str = traceback.format_exc()
            self.logger.error(f"ERROR starting edit form: {traceback_str}")
            await event.edit(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
    
    async def process_mood_callback(self, event, user_id: int, choice: str, lang: str = "ru", prefix: str = "") -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            choice: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        """
        if self.get_user_state(user_id) != FormState.WAITING_MOOD:
            await event.answer(self._t('form_invalid_state', lang=lang))
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        if choice == "back":
            # –î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
            await event.answer(self._t('form_first_step', lang=lang))
            return
        
        if choice != "skip":
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
            mood_mapping = {
                "excellent": "–û—Ç–ª–∏—á–Ω–æ",
                "good": "–•–æ—Ä–æ—à–æ",
                "normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ",
                "bad": "–ü–ª–æ—Ö–æ",
                "terrible": "–£–∂–∞—Å–Ω–æ"
            }
            self.update_user_form_data(user_id, mood=mood_mapping.get(choice))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –ø–æ–≥–æ–¥–∞
        self.set_user_state(user_id, FormState.WAITING_WEATHER)
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        form_data = self.get_user_form_data(user_id)
        if form_data.get("edit_mode"):
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
            current_weather = form_data.get("weather") or self._t('not_specified', lang=lang)
                
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä weather –Ω–∞–ø—Ä—è–º—É—é
            edit_weather_message = self._t('edit_weather_prompt', lang=lang, weather=current_weather)
            if not edit_weather_message:
                edit_weather_message = f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n\n{current_weather}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–≥–æ–¥—É:"
                
            await event.edit(
                edit_weather_message,
                buttons=self.get_weather_keyboard(lang, prefix)
            )
        else:
            await event.edit(
                self._t('today_weather_prompt', lang=lang) or "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?",
                buttons=self.get_weather_keyboard(lang, prefix)
            )
    
    async def process_weather_callback(self, event, user_id: int, choice: str, lang: str = "ru", prefix: str = "") -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–≥–æ–¥—ã
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            choice: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        """
        if self.get_user_state(user_id) != FormState.WAITING_WEATHER:
            await event.answer(self._t('form_invalid_state', lang=lang))
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        if choice == "back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
            self.set_user_state(user_id, FormState.WAITING_MOOD)
            
            # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            form_data = self.get_user_form_data(user_id)
            if form_data.get("edit_mode"):
                current_mood = form_data.get("mood") or self._t('not_specified', lang=lang)
                
                edit_mood_message = self._t('edit_mood_prompt', lang=lang, mood=current_mood)
                if not edit_mood_message:
                    edit_mood_message = f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:\n\n{current_mood}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:"
                    
                await event.edit(
                    edit_mood_message,
                    buttons=self.get_mood_keyboard(lang, prefix)
                )
            else:
                await event.edit(
                    self._t('today_mood_prompt', lang=lang) or "–ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                    buttons=self.get_mood_keyboard(lang, prefix)
                )
            return
        
        if choice == "manual":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã –≤—Ä—É—á–Ω—É—é
            self.update_user_form_data(user_id, waiting_manual_weather=True)
            self.logger.debug(f"Manual weather input mode activated. User ID: {user_id}")
            await event.edit(
                (self._t('today_weather_manual', lang=lang) or "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã:") + 
                "\n\n" + self._t('type_cancel_to_abort', lang=lang)
            )
            # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
            return
        
        if choice != "skip":
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
            weather_mapping = {
                "sunny": "–°–æ–ª–Ω–µ—á–Ω–æ",
                "cloudy": "–û–±–ª–∞—á–Ω–æ",
                "rainy": "–î–æ–∂–¥—å",
                "snowy": "–°–Ω–µ–≥",
                "foggy": "–¢—É–º–∞–Ω"
            }
            self.update_user_form_data(user_id, weather=weather_mapping.get(choice))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        self.set_user_state(user_id, FormState.WAITING_LOCATION)
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        form_data = self.get_user_form_data(user_id)
        if form_data.get("edit_mode"):
            current_location = form_data.get("location") or self._t('not_specified', lang=lang)
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
            edit_location_message = self._t('edit_location_prompt', lang=lang, location=current_location)
            if not edit_location_message:
                edit_location_message = f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
                
            await event.edit(
                edit_location_message,
                buttons=self.get_location_keyboard(lang, prefix)
            )
        else:
            await event.edit(
                self._t('today_location_prompt', lang=lang) or "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
                buttons=self.get_location_keyboard(lang, prefix)
            )
    
    async def process_location_callback(self, event, user_id: int, choice: str, lang: str = "ru", prefix: str = "") -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            choice: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        """
        if self.get_user_state(user_id) != FormState.WAITING_LOCATION:
            await event.answer(self._t('form_invalid_state', lang=lang))
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        if choice == "back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –ø–æ–≥–æ–¥–∞
            self.set_user_state(user_id, FormState.WAITING_WEATHER)
            
            # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            form_data = self.get_user_form_data(user_id)
            if form_data.get("edit_mode"):
                current_weather = form_data.get("weather") or self._t('not_specified', lang=lang)
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä weather –Ω–∞–ø—Ä—è–º—É—é
                edit_weather_message = self._t('edit_weather_prompt', lang=lang, weather=current_weather)
                if not edit_weather_message:
                    edit_weather_message = f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n\n{current_weather}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–≥–æ–¥—É:"
                    
                await event.edit(
                    edit_weather_message,
                    buttons=self.get_weather_keyboard(lang, prefix)
                )
            else:
                await event.edit(
                    self._t('today_weather_prompt', lang=lang) or "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?",
                    buttons=self.get_weather_keyboard(lang, prefix)
                )
            return
        
        if choice == "manual":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            self.update_user_form_data(user_id, waiting_manual_location=True)
            await event.edit(
                (self._t('today_location_manual', lang=lang) or "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:") + 
                "\n\n" + self._t('type_cancel_to_abort', lang=lang)
            )
            # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∂–¥–µ–º –≤–≤–æ–¥–∞
            return
        elif choice != "skip":
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
            location_mapping = {
                "home": "–î–æ–º",
                "work": "–†–∞–±–æ—Ç–∞",
                "street": "–£–ª–∏—Ü–∞"
            }
            self.update_user_form_data(user_id, location=location_mapping.get(choice))
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å–æ–±—ã—Ç–∏—è
        self.set_user_state(user_id, FormState.WAITING_EVENTS)
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        form_data = self.get_user_form_data(user_id)
        edit_mode = form_data.get("edit_mode", False)
        
        if edit_mode:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            current_events = form_data.get("events") or self._t('not_specified', lang=lang)
                
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.logger.debug(f"Showing events form with edit_mode=True. User ID: {user_id}, Current events: {current_events}")
                
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä events –Ω–∞–ø—Ä—è–º—É—é
            edit_events_message = self._t('edit_events_prompt', lang=lang, events=current_events)
            if not edit_events_message:
                edit_events_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
                
            await event.edit(
                edit_events_message,
                buttons=self.get_events_keyboard(lang, prefix, edit_mode=True)
            )
        else:
            await event.edit(
                self._t('today_events_prompt', lang=lang) or "–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                buttons=self.get_events_keyboard(lang, prefix, edit_mode=False)
            )
    
    async def process_events_callback(self, event, user_id: int, choice: str, lang: str = "ru", prefix: str = "") -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            choice: –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        """
        if self.get_user_state(user_id) != FormState.WAITING_EVENTS:
            await event.answer(self._t('form_invalid_state', lang=lang))
            return
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        self.logger.debug(f"Events callback handler called. User ID: {user_id}, Choice: {choice}")
        
        if choice == "back":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            self.set_user_state(user_id, FormState.WAITING_LOCATION)
            
            # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            form_data = self.get_user_form_data(user_id)
            if form_data.get("edit_mode"):
                current_location = form_data.get("location") or self._t('not_specified', lang=lang)
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
                edit_location_message = self._t('edit_location_prompt', lang=lang, location=current_location)
                if not edit_location_message:
                    edit_location_message = f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
                    
                await event.edit(
                    edit_location_message,
                    buttons=self.get_location_keyboard(lang, prefix)
                )
            else:
                await event.edit(
                    self._t('today_location_prompt', lang=lang) or "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
                    buttons=self.get_location_keyboard(lang, prefix)
                )
            return
        
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if choice == "replace":
            self.logger.debug(f"REPLACE button was clicked! User ID: {user_id}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ–Ω—ã
            self.update_user_form_data(user_id, events_mode="replace")
            form_data = self.get_user_form_data(user_id)
            current_events = form_data.get("events") or ""
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.logger.debug(f"Replace button clicked. User ID: {user_id}, Current events: {current_events}")
            
            replace_message = self._t('events_replace_prompt', lang=lang, events=current_events)
            if not replace_message:
                replace_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π:"
                
            await event.edit(replace_message + "\n\n" + self._t('type_cancel_to_abort', lang=lang))
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
            return
            
        elif choice == "append":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            self.update_user_form_data(user_id, events_mode="append")
            form_data = self.get_user_form_data(user_id)
            current_events = form_data.get("events") or ""
            
            append_message = self._t('events_append_prompt', lang=lang, events=current_events)
            if not append_message:
                append_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É:"
                
            await event.edit(append_message + "\n\n" + self._t('type_cancel_to_abort', lang=lang))
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
            return
            
        elif choice == "edit":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.update_user_form_data(user_id, events_mode="edit")
            form_data = self.get_user_form_data(user_id)
            current_events = form_data.get("events") or ""
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.logger.debug(f"Edit button clicked. User ID: {user_id}, Current events: {current_events}")
            
            edit_message = self._t('events_edit_prompt', lang=lang, events=current_events)
            if not edit_message:
                edit_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:"
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –í Telethon –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞,
            # –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º,
            # –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            
            await event.edit(edit_message + "\n\n" + self._t('type_cancel_to_abort', lang=lang))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –ª–µ–≥—á–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
            await event.respond(current_events)
            
            # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
            return
        
        if choice != "skip":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
            # –í —Å–ª—É—á–∞–µ —Å events_callback, –º—ã –æ–±—ã—á–Ω–æ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º,
            # —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏–π –≤–≤–æ–¥–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            pass
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        try:
            form_data = self.get_user_form_data(user_id)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_mode = False
            if "edit_mode" in form_data:
                edit_mode = form_data.pop("edit_mode")
                
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è —Ç–æ–ª—å–∫–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
            entry_data = {
                "mood": form_data.get("mood"),
                "weather": form_data.get("weather"),
                "location": form_data.get("location"),
                "events": form_data.get("events")
            }
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.logger.debug(f"Saving data: {entry_data}, edit_mode: {edit_mode}")
            
            if edit_mode:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                success = self.db.update_diary_entry(
                    user_id, 
                    form_data["entry_date"],
                    **entry_data
                )
                
                if success:
                    await event.edit(self._t('today_entry_updated', lang=lang))
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    await self.display_entry_content(event, user_id, form_data["entry_date"], lang)
                else:
                    await event.edit(self._t('today_entry_update_error', lang=lang))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                created = self.db.create_diary_entry(
                    user_id, 
                    form_data["entry_date"],
                    mood=entry_data.get("mood"),
                    weather=entry_data.get("weather"),
                    location=entry_data.get("location"),
                    events=entry_data.get("events")
                )
                
                if created:
                    await event.edit(self._t('today_entry_created', lang=lang))
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                    await self.display_entry_content(event, user_id, form_data["entry_date"], lang)
                else:
                    await event.edit(self._t('today_entry_error', lang=lang))
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.clear_user_data(user_id)
                
        except Exception as e:
            import traceback
            traceback_str = traceback.format_exc()
            self.logger.error(f"{traceback_str}")
            await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    async def process_manual_input(self, event, user_id: int, text: str, lang: str = "ru", prefix: str = "") -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            
        Returns:
            True, –µ—Å–ª–∏ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        if user_id not in self._user_states:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = self._user_states[user_id]
        form_data = self.get_user_form_data(user_id)
        edit_mode = form_data.get("edit_mode", False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
        if text.startswith('/'):
            # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ –∑–¥–µ—Å—å
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
        if text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.clear_user_data(user_id)
            
            # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
            await event.reply(self._t('creation_canceled', lang=lang))
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã
        if state == FormState.WAITING_WEATHER and form_data.get("waiting_manual_weather"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–≥–æ–¥—É
            self.update_user_form_data(user_id, weather=text)
            # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            form_data = self.get_user_form_data(user_id)
            if "waiting_manual_weather" in form_data:
                del form_data["waiting_manual_weather"]
                self.set_user_form_data(user_id, form_data)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            self.set_user_state(user_id, FormState.WAITING_LOCATION)
            
            # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if edit_mode:
                current_location = form_data.get("location") or self._t('not_specified', lang=lang)
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
                edit_location_message = self._t('edit_location_prompt', lang=lang, location=current_location)
                if not edit_location_message:
                    edit_location_message = f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
                    
                await event.reply(
                    edit_location_message,
                    buttons=self.get_location_keyboard(lang, prefix)
                )
            else:
                await event.reply(
                    self._t('today_location_prompt', lang=lang) or "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
                    buttons=self.get_location_keyboard(lang, prefix)
                )
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        elif state == FormState.WAITING_LOCATION and form_data.get("waiting_manual_location"):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            self.update_user_form_data(user_id, location=text)
            # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
            form_data = self.get_user_form_data(user_id)
            if "waiting_manual_location" in form_data:
                del form_data["waiting_manual_location"]
                self.set_user_form_data(user_id, form_data)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å–æ–±—ã—Ç–∏—è
            self.set_user_state(user_id, FormState.WAITING_EVENTS)
            
            # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if edit_mode:
                current_events = form_data.get("events") or self._t('not_specified', lang=lang)
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self.logger.debug(f"Showing events edit form with edit_mode=True. User ID: {user_id}, Current events: {current_events}")
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä events –Ω–∞–ø—Ä—è–º—É—é
                edit_events_message = self._t('edit_events_prompt', lang=lang, events=current_events)
                if not edit_events_message:
                    edit_events_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
                    
                await event.reply(
                    edit_events_message,
                    buttons=self.get_events_keyboard(lang, prefix, edit_mode=True)
                )
            else:
                await event.reply(
                    self._t('today_events_prompt', lang=lang) or "–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                    buttons=self.get_events_keyboard(lang, prefix, edit_mode=False)
                )
            return True
            
        # –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Å–æ–±—ã—Ç–∏–π
        elif state == FormState.WAITING_EVENTS:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            events_mode = form_data.get("events_mode", "replace")
            
            if events_mode == "append" and "events" in form_data and form_data["events"]:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
                current_events = form_data["events"]
                self.update_user_form_data(user_id, events=current_events + "\n" + text)
            elif events_mode == "edit":
                # –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                self.update_user_form_data(user_id, events=text)
            else:
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π (–¥–ª—è —Ä–µ–∂–∏–º–∞ "replace")
                self.update_user_form_data(user_id, events=text)
                
            # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            form_data = self.get_user_form_data(user_id)
            if "events_mode" in form_data:
                del form_data["events_mode"]
                self.set_user_form_data(user_id, form_data)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            try:
                form_data = self.get_user_form_data(user_id)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                edit_mode = False
                if "edit_mode" in form_data:
                    edit_mode = form_data.pop("edit_mode")
                    
                # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è —Ç–æ–ª—å–∫–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
                entry_data = {
                    "mood": form_data.get("mood"),
                    "weather": form_data.get("weather"),
                    "location": form_data.get("location"),
                    "events": form_data.get("events")
                }
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                self.logger.debug(f"Saving data from text input: {entry_data}, edit_mode: {edit_mode}")
                
                if edit_mode:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    success = self.db.update_diary_entry(
                        user_id, 
                        form_data["entry_date"],
                        **entry_data
                    )
                    
                    if success:
                        await event.reply(self._t('today_entry_updated', lang=lang))
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                        await self.display_entry_content(event, user_id, form_data["entry_date"], lang)
                    else:
                        await event.reply(self._t('today_entry_update_error', lang=lang))
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    created = self.db.create_diary_entry(
                        user_id, 
                        form_data["entry_date"],
                        mood=entry_data.get("mood"),
                        weather=entry_data.get("weather"),
                        location=entry_data.get("location"),
                        events=entry_data.get("events")
                    )
                    
                    if created:
                        await event.reply(self._t('today_entry_created', lang=lang))
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                        await self.display_entry_content(event, user_id, form_data["entry_date"], lang)
                    else:
                        await event.reply(self._t('today_entry_error', lang=lang))
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.clear_user_data(user_id)
                    
            except Exception as e:
                await event.reply(f"–û—à–∏–±–∫–∞: {str(e)}")
                
            return True
        
        return False
    
    async def check_existing_entry(self, event, user_id: int, entry_date: date, lang: str = "ru", prefix: str = "") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ Telegram
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            entry_date: –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
            lang: –Ø–∑—ã–∫
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            
        Returns:
            True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        entry = self.db.get_diary_entry(user_id, entry_date)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.logger.debug(f"Entry from DB for {entry_date} command: {entry}")
        
        if entry:
            # –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            buttons = [
                [
                    Button.inline(self._t('btn_edit', lang=lang), data=f"edit_{prefix}"),
                    Button.inline(self._t('btn_edit_events_only', lang=lang), data=f"edit_{prefix}_events"),
                    Button.inline(self._t('btn_cancel', lang=lang), data=f"cancel_edit_{prefix}")
                ]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–æ–∫
            self.logger.debug(f"Creating buttons for edit options. User ID: {user_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞
            entry_exists_key = f'{prefix.rstrip("_")}_entry_exists_edit' if prefix else 'today_entry_exists_edit'
            
            await event.reply(
                self._t(entry_exists_key, lang=lang) or f"–ó–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë?",
                buttons=buttons
            )
            return True
        
        return False