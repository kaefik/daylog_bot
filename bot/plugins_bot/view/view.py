# –ü–ª–∞–≥–∏–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /view —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ

from datetime import datetime, date, timedelta
try:
    from bot.menu_system import register_menu
    register_menu({
        'key': 'view', 'tr_key': 'menu_view', 'plugin': 'view', 'handler': 'view_command_handler', 'order': 30
    })
except Exception:
    pass
import calendar
import re
from telethon import events, Button
from bot.require_diary_user import require_diary_user

# tlgbot –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
tlgbot = globals().get('tlgbot')
# –õ–æ–≥–≥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
logger = globals().get('logger')

async def parse_date(date_str):
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY –∏–ª–∏ DD.MM –∏–ª–∏ DD.MM.*
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple:
    - –ï—Å–ª–∏ –æ–±—ã—á–Ω–∞—è –¥–∞—Ç–∞, —Ç–æ (date_obj, False)
    - –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å –≥–æ–¥–æ–º *, —Ç–æ (None, (day, month))
    - –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Ç–æ (None, False)
    """
    try:
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY
        full_date_pattern = r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$'
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM
        short_date_pattern = r'^(\d{1,2})\.(\d{1,2})$'
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.*
        all_years_pattern = r'^(\d{1,2})\.(\d{1,2})\.\*$'
        
        full_match = re.match(full_date_pattern, date_str)
        short_match = re.match(short_date_pattern, date_str)
        all_years_match = re.match(all_years_pattern, date_str)
        
        if full_match:
            day, month, year = map(int, full_match.groups())
            return date(year, month, day), False
        elif short_match:
            day, month = map(int, short_match.groups())
            current_year = datetime.now().year
            return date(current_year, month, day), False
        elif all_years_match:
            day, month = map(int, all_years_match.groups())
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º tuple (day, month) –∫–∞–∫ —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –≥–æ–¥–∞–º
            return None, (day, month)
        else:
            return None, False
    except ValueError as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
        return None, False

async def get_entry_by_date(user_id, entry_date):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DB —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∫ –ë–î (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö)
        db_manager = DatabaseManager(db_path=DAYLOG_DB_PATH)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"Getting entry with user_id={user_id}, entry_date={entry_date}, type={type(entry_date)}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –æ–±—ä–µ–∫—Ç date –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
        entry = db_manager.get_diary_entry(user_id, entry_date)
        
        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–µ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        date_str = entry_date.strftime("%Y-%m-%d")
        logger.debug(f"–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞ –¥–∞—Ç—É {date_str}: {entry}")
        
        return entry
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î: {e}")
        return None

async def get_entries_by_day_month(user_id, day, month):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—é –∏ –º–µ—Å—è—Ü—É –∑–∞ –≤—Å–µ –≥–æ–¥—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DB —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∫ –ë–î
        db_manager = DatabaseManager(db_path=DAYLOG_DB_PATH)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.debug(f"Searching entries for user_id={user_id}, day={day}, month={month}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—Å–µ –≥–æ–¥—ã
        entries = db_manager.get_diary_entries_by_day_month(user_id, day, month)
        
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(entries)} –∑–∞–ø–∏—Å–µ–π")
        
        return entries
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: {e}")
        return []

async def get_entries_by_period(user_id, start_date, end_date):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DB —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∫ –ë–î
        db_manager = DatabaseManager(db_path=DAYLOG_DB_PATH)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.debug(f"Searching entries for user_id={user_id}, period={start_date} to {end_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        entries = db_manager.get_entries_by_period(user_id, start_date, end_date)
        
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(entries)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥")
        
        return entries
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î –∑–∞ –ø–µ—Ä–∏–æ–¥: {e}")
        return []

def get_week_dates():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    –ù–µ–¥–µ–ª—è —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    """
    today = date.today()
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    weekday = today.weekday()
    # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    start_of_week = today - timedelta(days=weekday)
    # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    end_of_week = start_of_week + timedelta(days=6)
    
    return start_of_week, end_of_week

def get_month_dates():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    """
    today = date.today()
    # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    start_of_month = date(today.year, today.month, 1)
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    _, last_day = calendar.monthrange(today.year, today.month)
    end_of_month = date(today.year, today.month, last_day)
    
    return start_of_month, end_of_month

async def display_period_entries(event, entries, period_name):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    """
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    try:
        if not entries:
            await event.respond(tlgbot.i18n.t('view_entries_not_found_period', lang=lang, period=period_name) or f"–ó–∞–ø–∏—Å–∏ –∑–∞ {period_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        sorted_entries = sorted(entries, key=lambda x: x.get('entry_date'), reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–∏–æ–¥–µ
        header = tlgbot.i18n.t('entries_for_period', lang=lang, period=period_name) or f"üìÖ **–ó–∞–ø–∏—Å–∏ –∑–∞ {period_name}**\n\n"
        await event.respond(header, parse_mode='markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for entry in sorted_entries:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º date –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
            entry_date = entry.get('entry_date')
            if isinstance(entry_date, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ date
                entry_date = datetime.fromisoformat(entry_date).date()
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç date, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            
            await display_entry(event, entry, entry_date)
    
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {traceback_str}")
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}")

async def show_period_selection(event):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
    """
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    message = tlgbot.i18n.t('view_select_period', lang=lang) or "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    buttons = [
        [
            Button.inline(tlgbot.i18n.t('view_today', lang=lang) or "–°–µ–≥–æ–¥–Ω—è", data="view_period_today"),
            Button.inline(tlgbot.i18n.t('view_week', lang=lang) or "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", data="view_period_week")
        ],
        [
            Button.inline(tlgbot.i18n.t('view_month', lang=lang) or "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", data="view_period_month"),
            Button.inline(tlgbot.i18n.t('view_custom', lang=lang) or "–î—Ä—É–≥–∞—è –¥–∞—Ç–∞", data="view_period_custom")
        ]
    ]
    
    await event.respond(message, buttons=buttons)

async def display_entry(event, entry, display_date):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        date_formatted = display_date.strftime("%d.%m.%Y")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø–∏—Å–∏
        mood = entry.get("mood") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        weather = entry.get("weather") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        location = entry.get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        events = entry.get("events") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (tlgbot.i18n.t('entry_header', lang=lang, date=date_formatted) or f"üìù **–ó–∞–ø–∏—Å—å –æ—Ç {date_formatted}**") + "\n\n"
        message += (tlgbot.i18n.t('entry_mood', lang=lang, mood=mood) or f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}") + "\n"
        message += (tlgbot.i18n.t('entry_weather', lang=lang, weather=weather) or f"üå§ –ü–æ–≥–æ–¥–∞: {weather}") + "\n"
        message += (tlgbot.i18n.t('entry_location', lang=lang, location=location) or f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}") + "\n"
        message += (tlgbot.i18n.t('entry_events', lang=lang, events=events) or f"üìå –°–æ–±—ã—Ç–∏—è: {events}") + "\n"
        
        await event.respond(message, parse_mode='markdown')
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {traceback_str}")
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

async def display_multiple_entries(event, entries):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    try:
        if not entries:
            await event.respond(tlgbot.i18n.t('view_entries_not_found', lang=lang) or "–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        sorted_entries = sorted(entries, key=lambda x: x.get('entry_date'), reverse=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        sample_date_value = sorted_entries[0].get('entry_date')
        if isinstance(sample_date_value, str):
            sample_date = datetime.fromisoformat(sample_date_value).date()
        else:
            sample_date = sample_date_value
            
        date_formatted = sample_date.strftime("%d.%m")
        
        header = tlgbot.i18n.t('entries_for_date', lang=lang, date=date_formatted) or f"üìÖ **–ó–∞–ø–∏—Å–∏ –∑–∞ {date_formatted} (–≤—Å–µ –≥–æ–¥—ã)**\n\n"
        await event.respond(header, parse_mode='markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for entry in sorted_entries:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º date –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
            entry_date = entry.get('entry_date')
            if isinstance(entry_date, str):
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ date
                entry_date = datetime.fromisoformat(entry_date).date()
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç date, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            
            await display_entry(event, entry, entry_date)
    
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {traceback_str}")
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {str(e)}")

@tlgbot.on(events.NewMessage(pattern=r'^/view(?:\s+(\S+))?'))
@require_diary_user
async def view_command_handler(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /view
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    - DD.MM.YYYY - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞
    - DD.MM - –¥–∞—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
    - DD.MM.* - –¥–∞—Ç–∞ –≤–æ –≤—Å–µ—Ö –≥–æ–¥–∞—Ö
    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –≤—ã–≤–æ–¥–∏—Ç—Å—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    """
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    try:
        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä –∏–∑ menu:view callback —á–µ—Ä–µ–∑ dispatch)
        # —É event –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å .message (CallbackQuery). –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞.
        if not hasattr(event, 'message') or event.message is None:
            await show_period_selection(event)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã (–¥–∞—Ç—É) –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        command_text = (event.message.text or '').strip()
        parts = command_text.split(maxsplit=1)
        
        logger.debug(f"Command /view received: {command_text}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        target_date = None
        day_month_all_years = None
        
        if len(parts) > 1 and parts[1]:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –¥–∞—Ç—É
            date_str = parts[1].strip()
            logger.debug(f"Parsing date string: {date_str}")
            
            # –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è parse_date –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple (date_obj, day_month_tuple)
            target_date, day_month_all_years = await parse_date(date_str)
            
            if not target_date and not day_month_all_years:
                # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
                logger.warning(f"Invalid date format: {date_str}")
                error_msg = tlgbot.i18n.t('invalid_date_format', lang=lang) or f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.*"
                await event.respond(error_msg)
                return
        else:
            # –î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            await show_period_selection(event)
            return
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–∏—Å–∫
        if day_month_all_years:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –≥–æ–¥–æ–≤
            day, month = day_month_all_years
            logger.debug(f"Searching entries for day={day}, month={month} across all years")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
            entries = await get_entries_by_day_month(user_id, day, month)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await display_multiple_entries(event, entries)
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ
            logger.debug(f"Target date for search: {target_date}, type: {type(target_date)}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
            entry = await get_entry_by_date(user_id, target_date)
            
            if entry:
                # –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await display_entry(event, entry, target_date)
            else:
                # –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                date_formatted = target_date.strftime("%d.%m.%Y")
                not_found_msg = tlgbot.i18n.t('view_entry_not_found', lang=lang, date=date_formatted) or f"–ó–∞–ø–∏—Å—å –∑–∞ {date_formatted} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                await event.respond(not_found_msg)
    
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /view: {traceback_str}")
        await event.respond(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@tlgbot.on(events.CallbackQuery(pattern=r"view_period_.*"))
@require_diary_user
async def view_period_handler(event):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    """
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
    period = event.data.decode('utf-8').replace('view_period_', '')
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–Ω–æ–ø–∫–∏
        await event.answer()
        
        if period == 'today':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = date.today()
            entry = await get_entry_by_date(user_id, today)
            
            if entry:
                await display_entry(event, entry, today)
            else:
                date_formatted = today.strftime("%d.%m.%Y")
                not_found_msg = tlgbot.i18n.t('view_entry_not_found', lang=lang, date=date_formatted) or f"–ó–∞–ø–∏—Å—å –∑–∞ {date_formatted} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                await event.respond(not_found_msg)
                
        elif period == 'week':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            start_of_week, end_of_week = get_week_dates()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            entries = await get_entries_by_period(user_id, start_of_week, end_of_week)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            period_name = tlgbot.i18n.t('current_week', lang=lang) or "—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await display_period_entries(event, entries, period_name)
            
        elif period == 'month':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            start_of_month, end_of_month = get_month_dates()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –º–µ—Å—è—Ü
            entries = await get_entries_by_period(user_id, start_of_month, end_of_month)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            month_names = ["—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å", 
                         "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"]
            current_month = month_names[date.today().month - 1]
            period_name = tlgbot.i18n.t('current_month', lang=lang, month=current_month) or f"—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({current_month})"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await display_period_entries(event, entries, period_name)
            
        elif period == 'custom':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –¥–∞—Ç—É
            message = tlgbot.i18n.t('view_custom_help', lang=lang) or """
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã:

/view –î–î.–ú–ú.–ì–ì–ì–ì - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
/view –î–î.–ú–ú - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
/view –î–î.–ú–ú.* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤—Å–µ—Ö –ª–µ—Ç
            """
            await event.respond(message.strip())
    
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: {traceback_str}")
        await event.respond(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ /view
@tlgbot.on(events.NewMessage(pattern=r'^/view_help$'))
async def view_help_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    help_text = tlgbot.i18n.t('view_command_help', lang=lang) or """
–ö–æ–º–∞–Ω–¥–∞ /view –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
/view - –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å–µ–≥–æ–¥–Ω—è, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü)
/view –î–î.–ú–ú.–ì–ì–ì–ì - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
/view –î–î.–ú–ú - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
/view –î–î.–ú–ú.* - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤—Å–µ—Ö –ª–µ—Ç
    """
    
    await event.respond(help_text.strip())