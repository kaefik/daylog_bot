"""–ü–ª–∞–≥–∏–Ω –∫–æ–º–∞–Ω–¥—ã /menu –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ 'üìé –ú–µ–Ω—é' –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ inline-–º–µ–Ω—é –ø–æ–≤—Ç–æ—Ä–Ω–æ.

–õ–æ–≥–∏–∫–∞:
- /menu –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ inline –º–µ–Ω—é (—Å —É—á—ë—Ç–æ–º enable/disable).
- –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ reply-–∫–Ω–æ–ø–∫—É (—Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º menu_show_button) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ /menu.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: reply-–∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ /start (start_cmd) –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å persistent, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é –∫–æ–≥–¥–∞ —É–≥–æ–¥–Ω–æ.
"""
from telethon import events, Button
from bot.menu_system import build_menu, _is_admin_user
from bot.require_diary_user import require_diary_user

# tlgbot –∏ logger –≤–Ω–µ–¥—Ä—è—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º
tlgbot = globals().get('tlgbot')
logger = globals().get('logger')


def _get_lang(event):
    if hasattr(tlgbot, 'settings'):
        user = tlgbot.settings.get_user(event.sender_id)
        if user and getattr(user, 'lang', None):
            return user.lang
    return getattr(getattr(tlgbot, 'i18n', None), 'default_lang', 'ru')


async def _show_menu(event):
    lang = _get_lang(event)
    if hasattr(tlgbot, 'i18n'):
        t = tlgbot.i18n.t
        ready_text = t('start_ready', lang=lang)
    else:
        ready_text = '–ú–µ–Ω—é'
    buttons = build_menu(lang, is_admin=_is_admin_user(getattr(event, 'sender_id', 0)))
    await event.respond(ready_text, buttons=buttons)
    # –î—É–±–ª–∏—Ä—É–µ–º reply-–∫–Ω–æ–ø–∫—É –º–µ–Ω—é (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–∏—Å—Ç–∏–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
    try:
        if hasattr(tlgbot, 'i18n'):
            show_btn = tlgbot.i18n.t('menu_show_button', lang=lang)
        else:
            show_btn = 'üìé Menu'
        await event.respond(show_btn, buttons=[[Button.text(show_btn, resize=True, single_use=False)]])
    except Exception as e:  # noqa: BLE001
        if logger:
            logger.error(f"menu_cmd: failed to send reply menu button: {e}")


@tlgbot.on(tlgbot.cmd('menu'))  # type: ignore[misc]
@require_diary_user
async def menu_command_handler(event):
    await _show_menu(event)


@tlgbot.on(events.NewMessage)  # type: ignore[misc]
@require_diary_user
async def menu_text_button_handler(event):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ reply-–∫–Ω–æ–ø–∫–∏ (–∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ—ë —Ç–µ–∫—Å—Ç–æ–º)."""
    if not hasattr(tlgbot, 'i18n'):
        return
    lang = _get_lang(event)
    expected = tlgbot.i18n.t('menu_show_button', lang=lang)
    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    if (event.raw_text or '').strip() == expected:
        if logger:
            logger.debug('menu_cmd: reply menu button pressed')
        await _show_menu(event)
        # –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî –∑–¥–µ—Å—å –Ω–µ—Ç —Ä–∏—Å–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
        return
