
# –ü–ª–∞–≥–∏–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /today —Å –º–∞—Å—Ç–µ—Ä–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏

from datetime import date
from enum import Enum
from telethon import events, Button
from bot.require_diary_user import require_diary_user

# tlgbot –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
tlgbot = globals().get('tlgbot')
# –õ–æ–≥–≥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
logger = globals().get('logger')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FormState(str, Enum):
    WAITING_MOOD = "waiting_mood"
    WAITING_WEATHER = "waiting_weather"
    WAITING_LOCATION = "waiting_location"
    WAITING_EVENTS = "waiting_events"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_states = {}
user_form_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–ø–∏—Å–∏
async def display_entry_content(event, user_id, entry_date, lang="ru"):
    try:
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        db = DatabaseManager(db_path=DAYLOG_DB_PATH)
        entry = db.get_diary_entry(user_id, entry_date)
        
        if not entry:
            await event.respond(tlgbot.i18n.t('entry_not_found', lang=lang) or "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∑–∞–ø–∏—Å–∏
        mood = entry.get("mood") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        weather = entry.get("weather") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        location = entry.get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        events = entry.get("events") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        date_str = str(entry_date)
        message = (tlgbot.i18n.t('entry_title', lang=lang, date=date_str) or f"üìù –ó–∞–ø–∏—Å—å –æ—Ç {date_str}") + "\n\n"
        message += (tlgbot.i18n.t('entry_mood', lang=lang, mood=mood) or f"üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}") + "\n"
        message += (tlgbot.i18n.t('entry_weather', lang=lang, weather=weather) or f"üå§ –ü–æ–≥–æ–¥–∞: {weather}") + "\n"
        message += (tlgbot.i18n.t('entry_location', lang=lang, location=location) or f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}") + "\n"
        message += (tlgbot.i18n.t('entry_events', lang=lang, events=events) or f"üìå –°–æ–±—ã—Ç–∏—è: {events}") + "\n"
        
        await event.respond(message, parse_mode='markdown')
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"Error displaying entry: {traceback_str}")
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
def get_mood_keyboard(lang="ru"):
    return [
        [
            Button.inline(tlgbot.i18n.t('mood_excellent', lang=lang) or "–û—Ç–ª–∏—á–Ω–æ", data=f"mood_excellent"),
            Button.inline(tlgbot.i18n.t('mood_good', lang=lang) or "–•–æ—Ä–æ—à–æ", data=f"mood_good"),
        ],
        [
            Button.inline(tlgbot.i18n.t('mood_normal', lang=lang) or "–ù–æ—Ä–º–∞–ª—å–Ω–æ", data=f"mood_normal"),
            Button.inline(tlgbot.i18n.t('mood_bad', lang=lang) or "–ü–ª–æ—Ö–æ", data=f"mood_bad"),
        ],
        [
            Button.inline(tlgbot.i18n.t('mood_terrible', lang=lang) or "–£–∂–∞—Å–Ω–æ", data=f"mood_terrible"),
        ],
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=f"mood_skip"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data=f"cancel_creation"),
        ]
    ]

def get_weather_keyboard(lang="ru"):
    return [
        [
            Button.inline(tlgbot.i18n.t('weather_sunny', lang=lang) or "–°–æ–ª–Ω–µ—á–Ω–æ", data=f"weather_sunny"),
            Button.inline(tlgbot.i18n.t('weather_cloudy', lang=lang) or "–û–±–ª–∞—á–Ω–æ", data=f"weather_cloudy"),
        ],
        [
            Button.inline(tlgbot.i18n.t('weather_rainy', lang=lang) or "–î–æ–∂–¥—å", data=f"weather_rainy"),
            Button.inline(tlgbot.i18n.t('weather_snowy', lang=lang) or "–°–Ω–µ–≥", data=f"weather_snowy"),
        ],
        [
            Button.inline(tlgbot.i18n.t('weather_foggy', lang=lang) or "–¢—É–º–∞–Ω", data=f"weather_foggy"),
            Button.inline(tlgbot.i18n.t('btn_manual', lang=lang) or "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", data=f"weather_manual"),
        ],
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=f"weather_skip"),
            Button.inline(tlgbot.i18n.t('btn_back', lang=lang) or "–ù–∞–∑–∞–¥", data=f"weather_back"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data=f"cancel_creation"),
        ]
    ]

def get_location_keyboard(lang="ru"):
    return [
        [
            Button.inline(tlgbot.i18n.t('location_home', lang=lang) or "–î–æ–º", data=f"location_home"),
            Button.inline(tlgbot.i18n.t('location_work', lang=lang) or "–†–∞–±–æ—Ç–∞", data=f"location_work"),
        ],
        [
            Button.inline(tlgbot.i18n.t('location_street', lang=lang) or "–£–ª–∏—Ü–∞", data=f"location_street"),
            Button.inline(tlgbot.i18n.t('btn_manual', lang=lang) or "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", data=f"location_manual"),
        ],
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=f"location_skip"),
            Button.inline(tlgbot.i18n.t('btn_back', lang=lang) or "–ù–∞–∑–∞–¥", data=f"location_back"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data=f"cancel_creation"),
        ]
    ]

def get_events_keyboard(lang="ru", edit_mode=False):
    buttons = [
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data="events_skip"),
            Button.inline(tlgbot.i18n.t('btn_back', lang=lang) or "–ù–∞–∑–∞–¥", data="events_back"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data="cancel_creation"),
        ]
    ]
    
    # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∏—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–ü—Ä–∞–≤–∫–∞"
    if edit_mode:
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫
        logger.debug(f"Creating edit mode buttons with data: events_replace, events_append and events_edit")
        
        replace_btn = Button.inline(tlgbot.i18n.t('btn_replace', lang=lang) or "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", data="events_replace")
        append_btn = Button.inline(tlgbot.i18n.t('btn_append', lang=lang) or "–î–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—Å—Ç—É", data="events_append")
        edit_btn = Button.inline(tlgbot.i18n.t('btn_edit_text', lang=lang) or "–ü—Ä–∞–≤–∫–∞", data="events_edit")
        buttons.insert(0, [replace_btn, append_btn, edit_btn])
        
    return buttons

@tlgbot.on(tlgbot.cmd('today'))
@require_diary_user
async def today_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    try:
        from core.database.manager import DatabaseManager
    except ImportError:
        await event.reply(tlgbot.i18n.t('db_manager_import_error', lang=lang))
        return

    try:
        from cfg.config_tlg import DAYLOG_DB_PATH
    except ImportError:
        await event.reply(tlgbot.i18n.t('db_path_import_error', lang=lang))
        return

    db = DatabaseManager(db_path=DAYLOG_DB_PATH)
    today = date.today()
    entry = db.get_diary_entry(user_id, today)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.debug(f"Entry from DB for today command: {entry}")
    
    if entry:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        required_fields = ["mood", "weather", "location", "events"]
        for field in required_fields:
            if field not in entry:
                logger.warning(f"Missing field '{field}' in entry from DB")
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                entry[field] = None
    
    if entry:
        # –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        buttons = [
            [
                Button.inline(tlgbot.i18n.t('btn_edit', lang=lang) or "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", data="edit_today"),
                Button.inline(tlgbot.i18n.t('btn_edit_events_only', lang=lang) or "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", data="edit_today_events"),
                Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data="cancel_edit_today")
            ]
        ]
        await event.reply(
            tlgbot.i18n.t('today_entry_exists_edit', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë?",
            buttons=buttons
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    user_states[user_id] = FormState.WAITING_MOOD
    user_form_data[user_id] = {"entry_date": today}
    
    await event.reply(
        tlgbot.i18n.t('today_mood_prompt', lang=lang) or "–ö–∞–∫–æ–µ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        buttons=get_mood_keyboard(lang)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º—ã
@tlgbot.on(events.CallbackQuery(pattern="mood_.*"))
async def mood_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_MOOD:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    choice = data.split("_")[1]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    if choice == "back":
        # –î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
        await event.answer(tlgbot.i18n.t('form_first_step', lang=lang) or "–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥")
        return
    
    if choice != "skip":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
        mood_mapping = {
            "excellent": "–û—Ç–ª–∏—á–Ω–æ",
            "good": "–•–æ—Ä–æ—à–æ",
            "normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ",
            "bad": "–ü–ª–æ—Ö–æ",
            "terrible": "–£–∂–∞—Å–Ω–æ"
        }
        user_form_data[user_id]["mood"] = mood_mapping.get(choice)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –ø–æ–≥–æ–¥–∞
    user_states[user_id] = FormState.WAITING_WEATHER
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if user_form_data[user_id].get("edit_mode"):
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        current_weather = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if "weather" in user_form_data[user_id] and user_form_data[user_id]["weather"]:
            current_weather = user_form_data[user_id]["weather"]
        else:
            current_weather = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä weather –Ω–∞–ø—Ä—è–º—É—é
        edit_weather_message = tlgbot.i18n.t('edit_weather_prompt', lang=lang, weather=current_weather)
        if not edit_weather_message:
            edit_weather_message = f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n\n{current_weather}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–≥–æ–¥—É:"
            
        await event.edit(
            edit_weather_message,
            buttons=get_weather_keyboard(lang)
        )
    else:
        await event.edit(
            tlgbot.i18n.t('today_weather_prompt', lang=lang) or "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
            buttons=get_weather_keyboard(lang)
        )

@tlgbot.on(events.CallbackQuery(pattern="weather_.*"))
async def weather_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_WEATHER:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    choice = data.split("_")[1]
    
    if choice == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_MOOD
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if user_form_data[user_id].get("edit_mode"):
            current_mood = user_form_data[user_id].get("mood") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await event.edit(
                (tlgbot.i18n.t('edit_mood_prompt', lang=lang) or "–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:\n\n{mood}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:").format(mood=current_mood),
                buttons=get_mood_keyboard(lang)
            )
        else:
            await event.edit(
                tlgbot.i18n.t('today_mood_prompt', lang=lang) or "–ö–∞–∫–æ–µ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
                buttons=get_mood_keyboard(lang)
            )
        return
    
    if choice == "manual":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã
        user_form_data[user_id]["waiting_manual_weather"] = True
        await event.edit(
            (tlgbot.i18n.t('today_weather_manual', lang=lang) or "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã:") + 
            "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
        )
        # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∂–¥–µ–º –≤–≤–æ–¥–∞
        return
    elif choice != "skip":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
        weather_mapping = {
            "sunny": "–°–æ–ª–Ω–µ—á–Ω–æ",
            "cloudy": "–û–±–ª–∞—á–Ω–æ",
            "rainy": "–î–æ–∂–¥–ª–∏–≤–æ",
            "snowy": "–°–Ω–µ–∂–Ω–æ",
            "foggy": "–¢—É–º–∞–Ω–Ω–æ"
        }
        user_form_data[user_id]["weather"] = weather_mapping.get(choice)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    user_states[user_id] = FormState.WAITING_LOCATION
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if user_form_data[user_id].get("edit_mode"):
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        current_location = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if "location" in user_form_data[user_id] and user_form_data[user_id]["location"]:
            current_location = user_form_data[user_id]["location"]
        else:
            current_location = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
        edit_location_message = tlgbot.i18n.t('edit_location_prompt', lang=lang, location=current_location)
        if not edit_location_message:
            edit_location_message = f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
            
        await event.edit(
            edit_location_message,
            buttons=get_location_keyboard(lang)
        )
    else:
        await event.edit(
            tlgbot.i18n.t('today_location_prompt', lang=lang) or "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
            buttons=get_location_keyboard(lang)
        )

@tlgbot.on(events.CallbackQuery(pattern="location_.*"))
async def location_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_LOCATION:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    choice = data.split("_")[1]
    
    if choice == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –ø–æ–≥–æ–¥–∞
        user_states[user_id] = FormState.WAITING_WEATHER
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if user_form_data[user_id].get("edit_mode"):
            current_weather = user_form_data[user_id].get("weather") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä weather –Ω–∞–ø—Ä—è–º—É—é
            edit_weather_message = tlgbot.i18n.t('edit_weather_prompt', lang=lang, weather=current_weather)
            if not edit_weather_message:
                edit_weather_message = f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞:\n\n{current_weather}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–≥–æ–¥—É:"
                
            await event.edit(
                edit_weather_message,
                buttons=get_weather_keyboard(lang)
            )
        else:
            await event.edit(
                tlgbot.i18n.t('today_weather_prompt', lang=lang) or "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
                buttons=get_weather_keyboard(lang)
            )
        return
    
    if choice == "manual":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        user_form_data[user_id]["waiting_manual_location"] = True
        await event.edit(
            (tlgbot.i18n.t('today_location_manual', lang=lang) or "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:") + 
            "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
        )
        # –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –∂–¥–µ–º –≤–≤–æ–¥–∞
        return
    elif choice != "skip":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
        location_mapping = {
            "home": "–î–æ–º",
            "work": "–†–∞–±–æ—Ç–∞",
            "street": "–£–ª–∏—Ü–∞"
        }
        user_form_data[user_id]["location"] = location_mapping.get(choice)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å–æ–±—ã—Ç–∏—è
    user_states[user_id] = FormState.WAITING_EVENTS
    
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å–æ–±—ã—Ç–∏—è
    user_states[user_id] = FormState.WAITING_EVENTS
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if user_form_data[user_id].get("edit_mode"):
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        current_events = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if "events" in user_form_data[user_id] and user_form_data[user_id]["events"]:
            current_events = user_form_data[user_id]["events"]
        else:
            current_events = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"Showing events form with edit_mode=True in location_callback. User ID: {user_id}, Current events: {current_events}")
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä events –Ω–∞–ø—Ä—è–º—É—é
        edit_events_message = tlgbot.i18n.t('edit_events_prompt', lang=lang, events=current_events)
        if not edit_events_message:
            edit_events_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
            
        await event.edit(
            edit_events_message,
            buttons=get_events_keyboard(lang, edit_mode=True)
        )
    else:
        await event.edit(
            tlgbot.i18n.t('today_events_prompt', lang=lang) or "–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            buttons=get_events_keyboard(lang, edit_mode=False)
        )

@tlgbot.on(events.CallbackQuery(pattern="events_.*"))
async def events_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_EVENTS:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    choice = data.split("_")[1]
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    logger.debug(f"Events callback handler called. User ID: {user_id}, Choice: {choice}, Data: {data}, Raw data: {event.data}")
    
    if choice == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_LOCATION
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if user_form_data[user_id].get("edit_mode"):
            current_location = user_form_data[user_id].get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
            edit_location_message = tlgbot.i18n.t('edit_location_prompt', lang=lang, location=current_location)
            if not edit_location_message:
                edit_location_message = f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
                
            await event.edit(
                edit_location_message,
                buttons=get_location_keyboard(lang)
            )
        else:
            await event.edit(
                tlgbot.i18n.t('today_location_prompt', lang=lang) or "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
                buttons=get_location_keyboard(lang)
            )
        return
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if choice == "replace":
        logger.debug(f"REPLACE button was clicked! User ID: {user_id}")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ–Ω—ã
        user_form_data[user_id]["events_mode"] = "replace"
        current_events = user_form_data[user_id].get("events") or ""
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"Replace button clicked. User ID: {user_id}, Current events: {current_events}")
        
        replace_message = tlgbot.i18n.t('events_replace_prompt', lang=lang, events=current_events)
        if not replace_message:
            replace_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π:"
            
        await event.edit(replace_message + "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."))
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
        return
        
    elif choice == "append":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        user_form_data[user_id]["events_mode"] = "append"
        current_events = user_form_data[user_id].get("events") or ""
        
        append_message = tlgbot.i18n.t('events_append_prompt', lang=lang, events=current_events)
        if not append_message:
            append_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É:"
            
        await event.edit(append_message + "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."))
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
        return
        
    elif choice == "edit":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        user_form_data[user_id]["events_mode"] = "edit"
        current_events = user_form_data[user_id].get("events") or ""
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"Edit button clicked. User ID: {user_id}, Current events: {current_events}")
        
        edit_message = tlgbot.i18n.t('events_edit_prompt', lang=lang, events=current_events)
        if not edit_message:
            edit_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:"
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í Telethon –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞,
        # –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Ç–µ–∫—Å—Ç–æ–º,
        # –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        
        await event.edit(edit_message + "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –ª–µ–≥—á–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        await event.respond(current_events)
        
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
        return
    
    if choice != "skip":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        # –í —Å–ª—É—á–∞–µ —Å events_callback, –º—ã –æ–±—ã—á–Ω–æ –∑–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º,
        # —Ç–∞–∫ –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏–π –≤–≤–æ–¥–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    try:
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        db = DatabaseManager(db_path=DAYLOG_DB_PATH)
        form_data = user_form_data[user_id]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_mode = False
        if "edit_mode" in form_data:
            edit_mode = form_data.pop("edit_mode")
            
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è —Ç–æ–ª—å–∫–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
        entry_data = {
            "mood": form_data.get("mood"),
            "weather": form_data.get("weather"),
            "location": form_data.get("location"),
            "events": form_data.get("events")
        }
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.debug(f"Saving data: {entry_data}, edit_mode: {edit_mode}")
        
        if edit_mode:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            success = db.update_diary_entry(
                user_id, 
                form_data["entry_date"],
                **entry_data
            )
            
            if success:
                await event.edit(tlgbot.i18n.t('today_entry_updated', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                await display_entry_content(event, user_id, form_data["entry_date"], lang)
            else:
                await event.edit(tlgbot.i18n.t('today_entry_update_error', lang=lang) or "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            created = db.create_diary_entry(
                user_id, 
                form_data["entry_date"],
                mood=entry_data.get("mood"),
                weather=entry_data.get("weather"),
                location=entry_data.get("location"),
                events=entry_data.get("events")
            )
            
            if created:
                await event.edit(tlgbot.i18n.t('today_entry_created', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                await display_entry_content(event, user_id, form_data["entry_date"], lang)
            else:
                await event.edit(tlgbot.i18n.t('today_entry_error', lang=lang) or "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]
        if user_id in user_form_data:
            del user_form_data[user_id]
            
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"{traceback_str}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –ø–æ–ª–µ–π —Å –æ–ø—Ü–∏–µ–π "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
@tlgbot.on(events.NewMessage)
async def handle_manual_input(event):
    user_id = event.sender_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    if user_id not in user_states:
        return
    
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_state = user_states[user_id]
    text = event.text
    edit_mode = user_form_data[user_id].get("edit_mode", False)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
    if text.startswith('/'):
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ –∑–¥–µ—Å—å
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]
        if user_id in user_form_data:
            del user_form_data[user_id]
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
        await event.reply(tlgbot.i18n.t('creation_canceled', lang=lang) or "üëå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã
    if current_state == FormState.WAITING_WEATHER and user_form_data[user_id].get("waiting_manual_weather"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–≥–æ–¥—É
        user_form_data[user_id]["weather"] = text
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        del user_form_data[user_id]["waiting_manual_weather"]
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_LOCATION
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if edit_mode:
            current_location = user_form_data[user_id].get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
            edit_location_message = tlgbot.i18n.t('edit_location_prompt', lang=lang, location=current_location)
            if not edit_location_message:
                edit_location_message = f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
                
            await event.reply(
                edit_location_message,
                buttons=get_location_keyboard(lang)
            )
        else:
            await event.reply(
                tlgbot.i18n.t('today_location_prompt', lang=lang) or "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
                buttons=get_location_keyboard(lang)
            )
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    elif current_state == FormState.WAITING_LOCATION and user_form_data[user_id].get("waiting_manual_location"):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        user_form_data[user_id]["location"] = text
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        del user_form_data[user_id]["waiting_manual_location"]
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å–æ–±—ã—Ç–∏—è
        user_states[user_id] = FormState.WAITING_EVENTS
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if edit_mode:
            current_events = user_form_data[user_id].get("events") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.debug(f"Showing events edit form with edit_mode=True. User ID: {user_id}, Current events: {current_events}")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä events –Ω–∞–ø—Ä—è–º—É—é
            edit_events_message = tlgbot.i18n.t('edit_events_prompt', lang=lang, events=current_events)
            if not edit_events_message:
                edit_events_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
                
            await event.reply(
                edit_events_message,
                buttons=get_events_keyboard(lang, edit_mode=True)
            )
        else:
            await event.reply(
                tlgbot.i18n.t('today_events_prompt', lang=lang) or "–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                buttons=get_events_keyboard(lang, edit_mode=False)
            )
        return
        
    # –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Å–æ–±—ã—Ç–∏–π
    elif current_state == FormState.WAITING_EVENTS:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        events_mode = user_form_data[user_id].get("events_mode", "replace")
        
        if events_mode == "append" and "events" in user_form_data[user_id] and user_form_data[user_id]["events"]:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
            current_events = user_form_data[user_id]["events"]
            user_form_data[user_id]["events"] = current_events + "\n" + text
        elif events_mode == "edit":
            # –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            user_form_data[user_id]["events"] = text
        else:
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π (–¥–ª—è —Ä–µ–∂–∏–º–∞ "replace")
            user_form_data[user_id]["events"] = text
            
        # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if "events_mode" in user_form_data[user_id]:
            del user_form_data[user_id]["events_mode"]
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            from core.database.manager import DatabaseManager
            from cfg.config_tlg import DAYLOG_DB_PATH
            
            db = DatabaseManager(db_path=DAYLOG_DB_PATH)
            form_data = user_form_data[user_id]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            edit_mode = False
            if "edit_mode" in form_data:
                edit_mode = form_data.pop("edit_mode")
                
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è —Ç–æ–ª—å–∫–æ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
            entry_data = {
                "mood": form_data.get("mood"),
                "weather": form_data.get("weather"),
                "location": form_data.get("location"),
                "events": form_data.get("events")
            }
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.debug(f"Saving data from text input: {entry_data}, edit_mode: {edit_mode}")
            
            if edit_mode:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                success = db.update_diary_entry(
                    user_id, 
                    form_data["entry_date"],
                    **entry_data
                )
                
                if success:
                    await event.reply(tlgbot.i18n.t('today_entry_updated', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    await display_entry_content(event, user_id, form_data["entry_date"], lang)
                else:
                    await event.reply(tlgbot.i18n.t('today_entry_update_error', lang=lang) or "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                created = db.create_diary_entry(
                    user_id, 
                    form_data["entry_date"],
                    mood=entry_data.get("mood"),
                    weather=entry_data.get("weather"),
                    location=entry_data.get("location"),
                    events=entry_data.get("events")
                )
                
                if created:
                    await event.reply(tlgbot.i18n.t('today_entry_created', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                    await display_entry_content(event, user_id, form_data["entry_date"], lang)
                else:
                    await event.reply(tlgbot.i18n.t('today_entry_error', lang=lang) or "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states:
                del user_states[user_id]
            if user_id in user_form_data:
                del user_form_data[user_id]
                
        except Exception as e:
            await event.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
@tlgbot.on(events.CallbackQuery(pattern="cancel_creation"))
async def cancel_creation_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_form_data:
        del user_form_data[user_id]
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
    await event.edit(tlgbot.i18n.t('creation_canceled', lang=lang) or "üëå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
@tlgbot.on(events.CallbackQuery(pattern="edit_today|edit_today_events|cancel_edit_today"))
async def edit_today_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    data = event.data.decode("utf-8")
    
    if data == "cancel_edit_today":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await event.edit(tlgbot.i18n.t('edit_canceled', lang=lang) or "üëå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        import traceback
        
        db = DatabaseManager(db_path=DAYLOG_DB_PATH)
        today = date.today()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –¥–∞–Ω–Ω—ã–µ
        entry = db.get_diary_entry(user_id, today)
        logger.debug(f"Entry data for editing (raw): {entry}")
        
        if not entry:
            await event.edit(tlgbot.i18n.t('entry_not_found', lang=lang) or "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        required_fields = ["mood", "weather", "location", "events"]
        missing_fields = [field for field in required_fields if field not in entry]
        
        if missing_fields:
            logger.warning(f"Missing fields in entry: {missing_fields}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.debug(f"Entry data for edit: {entry}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
        if data == "edit_today_events":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏–π
            user_form_data[user_id] = {
                "entry_date": today,
                "edit_mode": True,
                "mood": entry.get("mood", ""),
                "weather": entry.get("weather", ""),
                "location": entry.get("location", ""),
                "events": entry.get("events", "")
            }
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            user_states[user_id] = FormState.WAITING_EVENTS
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ
            current_events = user_form_data[user_id].get("events", "")
            if not current_events:
                current_events = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä events –Ω–∞–ø—Ä—è–º—É—é
            edit_events_message = tlgbot.i18n.t('edit_events_prompt', lang=lang, events=current_events)
            if not edit_events_message:
                edit_events_message = f"–¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
                
            await event.edit(
                edit_events_message,
                buttons=get_events_keyboard(lang, edit_mode=True)
            )
            return
        
        # –ò–Ω–∞—á–µ –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_form_data[user_id] = {
            "entry_date": today,
            "edit_mode": True
        }
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        # –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∑–∞–ø–∏—Å–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è —É–ª—É—á—à–µ–Ω–∏—è–º –≤ DatabaseManager
        user_form_data[user_id]["mood"] = entry.get("mood", "")
        user_form_data[user_id]["weather"] = entry.get("weather", "")
        user_form_data[user_id]["location"] = entry.get("location", "")
        user_form_data[user_id]["events"] = entry.get("events", "")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_MOOD
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        current_mood = user_form_data[user_id].get("mood", "")
        if not current_mood:
            current_mood = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä mood –Ω–∞–ø—Ä—è–º—É—é
        edit_mood_message = tlgbot.i18n.t('edit_mood_prompt', lang=lang, mood=current_mood)
        if not edit_mood_message:
            edit_mood_message = f"–¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:\n\n{current_mood}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:"
            
        await event.edit(
            edit_mood_message,
            buttons=get_mood_keyboard(lang)
        )
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"{traceback_str}")
        await event.edit(f"–û—à–∏–±–∫–∞: {str(e)}")
