# –ü–ª–∞–≥–∏–Ω –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /yesterday —Å –º–∞—Å—Ç–µ—Ä–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å

from datetime import date, timedelta
from enum import Enum
from telethon import events, Button
from bot.require_diary_user import require_diary_user

# tlgbot –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
tlgbot = globals().get('tlgbot')
# logger –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ø–ª–∞–≥–∏–Ω–∞—Ö —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
logger = globals().get('logger')

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö callback-—Å–æ–±—ã—Ç–∏–π –≤ –º–æ–¥—É–ª–µ
@tlgbot.on(events.CallbackQuery())
async def log_all_yesterday_callbacks(event):
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ yesterday
    try:
        data = event.data.decode("utf-8")
        if "yesterday" in data or "cancel_edit_yesterday" in data:
            logger.debug(f"[YESTERDAY] GLOBAL CALLBACK MONITOR: Received callback with data: {data}")
            logger.debug(f"[YESTERDAY] GLOBAL CALLBACK MONITOR: Event type: {type(event)}")
            logger.debug(f"[YESTERDAY] GLOBAL CALLBACK MONITOR: Event sender_id: {event.sender_id}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 
            # –¥–ª—è —Å–æ–±—ã—Ç–∏–π –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            if data == "cancel_edit_yesterday":
                # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É handle_yesterday_editing
                # –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –≤ –¥—Ä—É–≥–∏—Ö –ø–ª–∞–≥–∏–Ω–∞—Ö –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                pass
    except Exception as e:
        logger.debug(f"[YESTERDAY] GLOBAL CALLBACK MONITOR: Error processing callback: {str(e)}")
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    return False

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FormState(str, Enum):
    WAITING_MOOD = "waiting_mood"
    WAITING_WEATHER = "waiting_weather"
    WAITING_LOCATION = "waiting_location"
    WAITING_EVENTS = "waiting_events"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_states = {}
user_form_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–ø–∏—Å–∏
async def display_entry_content(event, user_id, entry_date, lang="ru"):
    try:
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        db = DatabaseManager(db_path=DAYLOG_DB_PATH)
        entry = db.get_diary_entry(user_id, entry_date)
        
        if not entry:
            await event.respond(tlgbot.i18n.t('entry_not_found', lang=lang) or "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∑–∞–ø–∏—Å–∏
        mood = entry.get("mood") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        weather = entry.get("weather") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        location = entry.get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        events = entry.get("events") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        date_str = str(entry_date)
        message = (tlgbot.i18n.t('entry_title', lang=lang, date=date_str) or f"üìù –ó–∞–ø–∏—Å—å –æ—Ç {date_str}") + "\n\n"
        message += (tlgbot.i18n.t('entry_mood', lang=lang, mood=mood) or f"üôÇ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}") + "\n"
        message += (tlgbot.i18n.t('entry_weather', lang=lang, weather=weather) or f"üå§ –ü–æ–≥–æ–¥–∞: {weather}") + "\n"
        message += (tlgbot.i18n.t('entry_location', lang=lang, location=location) or f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}") + "\n"
        message += (tlgbot.i18n.t('entry_events', lang=lang, events=events) or f"üìå –°–æ–±—ã—Ç–∏—è: {events}") + "\n"
        
        await event.respond(message, parse_mode='markdown')
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"ERROR displaying entry: {traceback_str}")
        await event.respond(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
def get_mood_keyboard(lang="ru"):
    return [
        [
            Button.inline(tlgbot.i18n.t('mood_excellent', lang=lang) or "–û—Ç–ª–∏—á–Ω–æ", data=f"yesterday_mood_excellent"),
            Button.inline(tlgbot.i18n.t('mood_good', lang=lang) or "–•–æ—Ä–æ—à–æ", data=f"yesterday_mood_good"),
        ],
        [
            Button.inline(tlgbot.i18n.t('mood_normal', lang=lang) or "–ù–æ—Ä–º–∞–ª—å–Ω–æ", data=f"yesterday_mood_normal"),
            Button.inline(tlgbot.i18n.t('mood_bad', lang=lang) or "–ü–ª–æ—Ö–æ", data=f"yesterday_mood_bad"),
        ],
        [
            Button.inline(tlgbot.i18n.t('mood_terrible', lang=lang) or "–£–∂–∞—Å–Ω–æ", data=f"yesterday_mood_terrible"),
        ],
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=f"yesterday_mood_skip"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data=f"cancel_creation"),
        ]
    ]

def get_weather_keyboard(lang="ru"):
    return [
        [
            Button.inline(tlgbot.i18n.t('weather_sunny', lang=lang) or "–°–æ–ª–Ω–µ—á–Ω–æ", data=f"yesterday_weather_sunny"),
            Button.inline(tlgbot.i18n.t('weather_cloudy', lang=lang) or "–û–±–ª–∞—á–Ω–æ", data=f"yesterday_weather_cloudy"),
        ],
        [
            Button.inline(tlgbot.i18n.t('weather_rainy', lang=lang) or "–î–æ–∂–¥—å", data=f"yesterday_weather_rainy"),
            Button.inline(tlgbot.i18n.t('weather_snowy', lang=lang) or "–°–Ω–µ–≥", data=f"yesterday_weather_snowy"),
        ],
        [
            Button.inline(tlgbot.i18n.t('weather_foggy', lang=lang) or "–¢—É–º–∞–Ω", data=f"yesterday_weather_foggy"),
            Button.inline(tlgbot.i18n.t('btn_manual', lang=lang) or "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", data=f"yesterday_weather_manual"),
        ],
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=f"yesterday_weather_skip"),
            Button.inline(tlgbot.i18n.t('btn_back', lang=lang) or "–ù–∞–∑–∞–¥", data=f"yesterday_weather_back"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data=f"cancel_creation"),
        ]
    ]

def get_location_keyboard(lang="ru"):
    return [
        [
            Button.inline(tlgbot.i18n.t('location_home', lang=lang) or "–î–æ–º", data=f"yesterday_location_home"),
            Button.inline(tlgbot.i18n.t('location_work', lang=lang) or "–†–∞–±–æ—Ç–∞", data=f"yesterday_location_work"),
        ],
        [
            Button.inline(tlgbot.i18n.t('location_street', lang=lang) or "–£–ª–∏—Ü–∞", data=f"yesterday_location_street"),
            Button.inline(tlgbot.i18n.t('btn_manual', lang=lang) or "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", data=f"yesterday_location_manual"),
        ],
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data=f"yesterday_location_skip"),
            Button.inline(tlgbot.i18n.t('btn_back', lang=lang) or "–ù–∞–∑–∞–¥", data=f"yesterday_location_back"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data=f"cancel_creation"),
        ]
    ]

def get_events_keyboard(lang="ru", edit_mode=False):
    buttons = [
        [
            Button.inline(tlgbot.i18n.t('btn_skip', lang=lang) or "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", data="yesterday_events_skip"),
            Button.inline(tlgbot.i18n.t('btn_back', lang=lang) or "–ù–∞–∑–∞–¥", data="yesterday_events_back"),
            Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data="cancel_creation"),
        ]
    ]
    
    # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ–Ω–∏—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å" –∏ "–ü—Ä–∞–≤–∫–∞"
    if edit_mode:
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫
        logger.debug(f"Creating edit mode buttons with data: yesterday_events_replace, yesterday_events_append and yesterday_events_edit")
        
        replace_btn = Button.inline(tlgbot.i18n.t('btn_replace', lang=lang) or "–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", data="yesterday_events_replace")
        append_btn = Button.inline(tlgbot.i18n.t('btn_append', lang=lang) or "–î–æ–±–∞–≤–∏—Ç—å –∫ —Ç–µ–∫—Å—Ç—É", data="yesterday_events_append")
        edit_btn = Button.inline(tlgbot.i18n.t('btn_edit_text', lang=lang) or "–ü—Ä–∞–≤–∫–∞", data="yesterday_events_edit")
        buttons.insert(0, [replace_btn, append_btn, edit_btn])
        
    return buttons

@tlgbot.on(tlgbot.cmd('yesterday'))
@require_diary_user
async def yesterday_handler(event):
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    logger.debug(f"[YESTERDAY] Command handler started")
    logger.debug(f"[YESTERDAY] Event type: {type(event)}")
    
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    logger.debug(f"[YESTERDAY] User ID: {user_id}, Lang: {lang}")
    try:
        from core.database.manager import DatabaseManager
    except ImportError:
        await event.reply(tlgbot.i18n.t('db_manager_import_error', lang=lang))
        return

    try:
        from cfg.config_tlg import DAYLOG_DB_PATH
    except ImportError:
        await event.reply(tlgbot.i18n.t('db_path_import_error', lang=lang))
        return

    db = DatabaseManager(db_path=DAYLOG_DB_PATH)
    yesterday_date = date.today() - timedelta(days=1)
    entry = db.get_diary_entry(user_id, yesterday_date)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.debug(f"Entry from DB for yesterday command: {entry}")
    
    if entry:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        required_fields = ["mood", "weather", "location", "events"]
        for field in required_fields:
            if field not in entry:
                logger.warning(f"Missing field '{field}' in entry from DB")
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
                entry[field] = None
    
    if entry:
        # –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        buttons = [
            [
                Button.inline(tlgbot.i18n.t('btn_edit', lang=lang) or "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", data="edit_yesterday"),
                Button.inline(tlgbot.i18n.t('btn_edit_events_only', lang=lang) or "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", data="edit_yesterday_events"),
                Button.inline(tlgbot.i18n.t('btn_cancel', lang=lang) or "–û—Ç–º–µ–Ω–∞", data="cancel_edit_yesterday")
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–æ–∫
        logger.debug(f"[YESTERDAY] Creating buttons for edit options. User ID: {user_id}")
        for row_idx, row in enumerate(buttons):
            for btn_idx, btn in enumerate(row):
                logger.debug(f"[YESTERDAY] Button [{row_idx}][{btn_idx}]: text={btn.text}, data={btn.data}")
        
        await event.reply(
            tlgbot.i18n.t('yesterday_entry_exists_edit', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë?",
            buttons=buttons
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    user_states[user_id] = FormState.WAITING_MOOD
    user_form_data[user_id] = {"entry_date": yesterday_date}
    
    await event.reply(
        "–ö–∞–∫–æ–µ —É –≤–∞—Å –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—á–µ—Ä–∞?",
        buttons=get_mood_keyboard(lang)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º—ã
@tlgbot.on(events.CallbackQuery(pattern="yesterday_mood_.*"))
async def yesterday_mood_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_MOOD:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    choice = data.split("_")[2]  # yesterday_mood_choice
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    if choice == "back":
        # –î–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞
        await event.answer(tlgbot.i18n.t('form_first_step', lang=lang) or "–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥")
        return
    
    if choice != "skip":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
        mood_mapping = {
            "excellent": "–û—Ç–ª–∏—á–Ω–æ",
            "good": "–•–æ—Ä–æ—à–æ",
            "normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ",
            "bad": "–ü–ª–æ—Ö–æ",
            "terrible": "–£–∂–∞—Å–Ω–æ"
        }
        user_form_data[user_id]["mood"] = mood_mapping.get(choice)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –ø–æ–≥–æ–¥–∞
    user_states[user_id] = FormState.WAITING_WEATHER
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if user_form_data[user_id].get("edit_mode"):
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
        current_weather = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if "weather" in user_form_data[user_id] and user_form_data[user_id]["weather"]:
            current_weather = user_form_data[user_id]["weather"]
        else:
            current_weather = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä weather –Ω–∞–ø—Ä—è–º—É—é
        edit_weather_message = f"–í—á–µ—Ä–∞—à–Ω—è—è –ø–æ–≥–æ–¥–∞:\n\n{current_weather}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–≥–æ–¥—É:"
            
        await event.edit(
            edit_weather_message,
            buttons=get_weather_keyboard(lang)
        )
    else:
        await event.edit(
            "–ö–∞–∫–∞—è –±—ã–ª–∞ –ø–æ–≥–æ–¥–∞ –≤—á–µ—Ä–∞?",
            buttons=get_weather_keyboard(lang)
        )

@tlgbot.on(events.CallbackQuery(pattern="yesterday_weather_.*"))
async def yesterday_weather_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_WEATHER:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    choice = data.split("_")[2]  # yesterday_weather_choice
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    if choice == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_MOOD
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if user_form_data[user_id].get("edit_mode"):
            current_mood = user_form_data[user_id].get("mood") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä mood –Ω–∞–ø—Ä—è–º—É—é
            edit_mood_message = f"–í—á–µ—Ä–∞—à–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:\n\n{current_mood}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:"
                
            await event.edit(
                edit_mood_message,
                buttons=get_mood_keyboard(lang)
            )
        else:
            await event.edit(
                "–ö–∞–∫–æ–µ —É –≤–∞—Å –±—ã–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—á–µ—Ä–∞?",
                buttons=get_mood_keyboard(lang)
            )
        return
    
    if choice == "manual":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã –≤—Ä—É—á–Ω—É—é
        user_form_data[user_id]["manual_weather"] = True
        logger.debug(f"Manual weather input mode activated. User ID: {user_id}")
        await event.edit(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –≤—á–µ—Ä–∞:" + 
            "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        return
    
    if choice != "skip":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
        weather_mapping = {
            "sunny": "–°–æ–ª–Ω–µ—á–Ω–æ",
            "cloudy": "–û–±–ª–∞—á–Ω–æ",
            "rainy": "–î–æ–∂–¥—å",
            "snowy": "–°–Ω–µ–≥",
            "foggy": "–¢—É–º–∞–Ω"
        }
        user_form_data[user_id]["weather"] = weather_mapping.get(choice)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    user_states[user_id] = FormState.WAITING_LOCATION
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    if user_form_data[user_id].get("edit_mode"):
        current_location = user_form_data[user_id].get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
        edit_location_message = f"–í—á–µ—Ä–∞—à–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
        
        await event.edit(
            edit_location_message,
            buttons=get_location_keyboard(lang)
        )
    else:
        await event.edit(
            "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤—á–µ—Ä–∞?",
            buttons=get_location_keyboard(lang)
        )

@tlgbot.on(events.CallbackQuery(pattern="yesterday_location_.*"))
async def yesterday_location_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_LOCATION:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    choice = data.split("_")[2]  # yesterday_location_choice
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    if choice == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –ø–æ–≥–æ–¥–∞
        user_states[user_id] = FormState.WAITING_WEATHER
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if user_form_data[user_id].get("edit_mode"):
            current_weather = user_form_data[user_id].get("weather") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä weather –Ω–∞–ø—Ä—è–º—É—é
            edit_weather_message = f"–í—á–µ—Ä–∞—à–Ω—è—è –ø–æ–≥–æ–¥–∞:\n\n{current_weather}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–≥–æ–¥—É:"
            
            await event.edit(
                edit_weather_message,
                buttons=get_weather_keyboard(lang)
            )
        else:
            await event.edit(
                "–ö–∞–∫–∞—è –±—ã–ª–∞ –ø–æ–≥–æ–¥–∞ –≤—á–µ—Ä–∞?",
                buttons=get_weather_keyboard(lang)
            )
        return
    
    if choice == "manual":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
        user_form_data[user_id]["manual_location"] = True
        logger.debug(f"Manual location mode activated. User ID: {user_id}")
        await event.edit(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—á–µ—Ä–∞:" + 
            "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        return
    
    if choice != "skip":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î
        location_mapping = {
            "home": "–î–æ–º",
            "work": "–†–∞–±–æ—Ç–∞",
            "street": "–£–ª–∏—Ü–∞"
        }
        user_form_data[user_id]["location"] = location_mapping.get(choice)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å–æ–±—ã—Ç–∏—è
    user_states[user_id] = FormState.WAITING_EVENTS
    
    # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    edit_mode = user_form_data[user_id].get("edit_mode", False)
    current_events = user_form_data[user_id].get("events", "")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.debug(f"Showing events form with edit_mode={edit_mode} in location_callback. User ID: {user_id}, Current events: {current_events}")
    
    if edit_mode:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä events –Ω–∞–ø—Ä—è–º—É—é
        edit_events_message = f"–í—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
        
        await event.edit(
            edit_events_message,
            buttons=get_events_keyboard(lang, edit_mode=True)
        )
    else:
        await event.edit(
            "–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            buttons=get_events_keyboard(lang, edit_mode=False)
        )

@tlgbot.on(events.CallbackQuery(pattern="yesterday_events_.*"))
async def yesterday_events_callback_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    if user_id not in user_states or user_states[user_id] != FormState.WAITING_EVENTS:
        await event.answer(tlgbot.i18n.t('form_invalid_state', lang=lang) or "–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã")
        return
    
    data = event.data.decode("utf-8")
    parts = data.split("_")
    choice = parts[2] if len(parts) > 2 else ""  # yesterday_events_choice
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if choice == "replace":
        current_events = user_form_data[user_id].get("events") or ""
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –∑–∞–º–µ–Ω—ã
        user_form_data[user_id]["replace_mode"] = True
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"Replace button clicked. User ID: {user_id}, Current events: {current_events}")
        
        replace_message = tlgbot.i18n.t('events_replace_prompt', lang=lang, events=current_events)
        if not replace_message:
            replace_message = f"–í—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π:"
            
        await event.edit(replace_message + "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."))
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
        return
    
    elif choice == "append":
        current_events = user_form_data[user_id].get("events") or ""
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        user_form_data[user_id]["append_mode"] = True
        
        append_message = tlgbot.i18n.t('events_append_prompt', lang=lang, events=current_events)
        if not append_message:
            append_message = f"–í—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–µ–∫—É—â–µ–º—É:"
            
        await event.edit(append_message + "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."))
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
        return
        
    elif choice == "edit":
        current_events = user_form_data[user_id].get("events") or ""
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        user_form_data[user_id]["edit_text_mode"] = True
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"Edit button clicked. User ID: {user_id}, Current events: {current_events}")
        
        edit_message = tlgbot.i18n.t('events_edit_prompt', lang=lang, events=current_events)
        if not edit_message:
            edit_message = f"–í—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\"{current_events}\"\n\n–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç:"
            
        await event.edit(edit_message + "\n\n" + (tlgbot.i18n.t('type_cancel_to_abort', lang=lang) or "–ù–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –ª–µ–≥—á–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        await event.respond(current_events)
        
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ handle_manual_input
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
    if choice == "back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_LOCATION
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if user_form_data[user_id].get("edit_mode"):
            current_location = user_form_data[user_id].get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
            edit_location_message = f"–í—á–µ—Ä–∞—à–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
            
            await event.edit(
                edit_location_message,
                buttons=get_location_keyboard(lang)
            )
        else:
            await event.edit(
                "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤—á–µ—Ä–∞?",
                buttons=get_location_keyboard(lang)
            )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    # (—Å–æ–±—ã—Ç–∏—è –æ–±—ã—á–Ω–æ –≤–≤–æ–¥—è—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ–ø—É—Å–∫)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    try:
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        db = DatabaseManager(db_path=DAYLOG_DB_PATH)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        entry_date = user_form_data[user_id]["entry_date"]
        mood = user_form_data[user_id].get("mood")
        weather = user_form_data[user_id].get("weather")
        location = user_form_data[user_id].get("location")
        events = user_form_data[user_id].get("events", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        existing_entry = db.get_diary_entry(user_id, entry_date)
        
        if existing_entry:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            success = db.update_diary_entry(
                user_id, 
                entry_date,
                mood=mood, 
                weather=weather, 
                location=location, 
                events=events
            )
            if success:
                await event.edit(tlgbot.i18n.t('yesterday_entry_updated', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                await display_entry_content(event, user_id, entry_date, lang)
            else:
                await event.edit(tlgbot.i18n.t('yesterday_entry_update_error', lang=lang) or "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            created = db.create_diary_entry(
                user_id, 
                entry_date,
                mood=mood,
                weather=weather,
                location=location,
                events=events
            )
            if created:
                await event.edit(tlgbot.i18n.t('yesterday_entry_created', lang=lang) or "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Å–æ–∑–¥–∞–Ω–∞.")
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                await display_entry_content(event, user_id, entry_date, lang)
            else:
                await event.edit(tlgbot.i18n.t('yesterday_entry_error', lang=lang) or "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
                
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]
        if user_id in user_form_data:
            del user_form_data[user_id]
        
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"ERROR saving entry: {traceback_str}")
        if user_form_data[user_id].get("edit_mode"):
            await event.edit(tlgbot.i18n.t('today_entry_update_error', lang=lang) or f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
        else:
            await event.edit(tlgbot.i18n.t('today_entry_error', lang=lang) or f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@tlgbot.on(events.NewMessage)
async def yesterday_handle_manual_input(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
    if user_id not in user_states:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_states[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /)
    if event.text.startswith('/'):
        # –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ –∑–¥–µ—Å—å
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if event.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            del user_states[user_id]
        if user_id in user_form_data:
            del user_form_data[user_id]
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
        await event.reply(tlgbot.i18n.t('creation_canceled', lang=lang) or "üëå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return
    
    if state == FormState.WAITING_WEATHER and user_form_data[user_id].get("manual_weather"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É –≤—Ä—É—á–Ω—É—é
        logger.debug(f"Manual weather input. User ID: {user_id}, Input: '{event.text}'")
        user_form_data[user_id]["weather"] = event.text
        user_form_data[user_id]["manual_weather"] = False
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_LOCATION
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if user_form_data[user_id].get("edit_mode"):
            current_location = user_form_data[user_id].get("location") or tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä location –Ω–∞–ø—Ä—è–º—É—é
            edit_location_message = f"–í—á–µ—Ä–∞—à–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n{current_location}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"
            
            await event.respond(
                edit_location_message,
                buttons=get_location_keyboard(lang)
            )
        else:
            await event.respond(
                "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤—á–µ—Ä–∞?",
                buttons=get_location_keyboard(lang)
            )
        
    elif state == FormState.WAITING_LOCATION and user_form_data[user_id].get("manual_location"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
        logger.debug(f"Manual location input. User ID: {user_id}, Input: '{event.text}'")
        user_form_data[user_id]["location"] = event.text
        user_form_data[user_id]["manual_location"] = False
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - —Å–æ–±—ã—Ç–∏—è
        user_states[user_id] = FormState.WAITING_EVENTS
        
        # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        edit_mode = user_form_data[user_id].get("edit_mode", False)
        current_events = user_form_data[user_id].get("events", "")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"Showing events edit form with edit_mode=True. User ID: {user_id}, Current events: {current_events}")
        
        if edit_mode:
            edit_events_message = f"–í—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
                
            await event.respond(
                edit_events_message,
                buttons=get_events_keyboard(lang, edit_mode=True)
            )
        else:
            await event.respond(
                "–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                buttons=get_events_keyboard(lang, edit_mode=False)
            )
    
    elif state == FormState.WAITING_EVENTS:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –≤–≤–æ–¥ —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        edit_mode = user_form_data[user_id].get("edit_mode", False)
        edit_events_only = user_form_data[user_id].get("edit_events_only", False)
        replace_mode = user_form_data[user_id].get("replace_mode", False)
        append_mode = user_form_data[user_id].get("append_mode", False)
        edit_text_mode = user_form_data[user_id].get("edit_text_mode", False)
        
        if replace_mode:
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
            user_form_data[user_id]["events"] = event.text
            user_form_data[user_id]["replace_mode"] = False
        elif append_mode:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É
            current_events = user_form_data[user_id].get("events", "")
            logger.debug(f"Append mode. User ID: {user_id}, Current events: '{current_events}', New text: '{event.text}'")
            user_form_data[user_id]["events"] = f"{current_events}\n{event.text}" if current_events else event.text
            user_form_data[user_id]["append_mode"] = False
        elif edit_text_mode:
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
            user_form_data[user_id]["events"] = event.text
            user_form_data[user_id]["edit_text_mode"] = False
        else:
            # –û–±—ã—á–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π
            user_form_data[user_id]["events"] = event.text
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        edit_events_only = user_form_data[user_id].get("edit_events_only", False)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.debug(f"edit_events_only={edit_events_only}, edit_mode={edit_mode}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        try:
            from core.database.manager import DatabaseManager
            from cfg.config_tlg import DAYLOG_DB_PATH
            
            db = DatabaseManager(db_path=DAYLOG_DB_PATH)
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            entry_date = user_form_data[user_id]["entry_date"]
            mood = user_form_data[user_id].get("mood")
            weather = user_form_data[user_id].get("weather")
            location = user_form_data[user_id].get("location")
            events = user_form_data[user_id].get("events", "")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            entry_data = {
                "mood": mood,
                "weather": weather,
                "location": location,
                "events": events
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
            existing_entry = db.get_diary_entry(user_id, entry_date)
            
            if existing_entry or edit_mode:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                success = db.update_diary_entry(
                    user_id, 
                    entry_date,
                    **entry_data
                )
                if success:
                    await event.respond(tlgbot.i18n.t('yesterday_entry_updated', lang=lang) or "–ó–∞–ø–∏—Å—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    await display_entry_content(event, user_id, entry_date, lang)
                else:
                    await event.respond(tlgbot.i18n.t('yesterday_entry_update_error', lang=lang) or "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                created = db.create_diary_entry(
                    user_id, 
                    entry_date,
                    **entry_data
                )
                if created:
                    await event.respond(tlgbot.i18n.t('yesterday_entry_created', lang=lang) or "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å —Å–æ–∑–¥–∞–Ω–∞.")
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                    await display_entry_content(event, user_id, entry_date, lang)
                else:
                    await event.respond(tlgbot.i18n.t('yesterday_entry_error', lang=lang) or "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states:
                del user_states[user_id]
            if user_id in user_form_data:
                del user_form_data[user_id]
            
        except Exception as e:
            import traceback
            traceback_str = traceback.format_exc()
            logger.error(f"ERROR saving entry: {traceback_str}")
            if edit_mode:
                await event.respond(tlgbot.i18n.t('yesterday_entry_update_error', lang=lang) or f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")
            else:
                await event.respond(tlgbot.i18n.t('yesterday_entry_error', lang=lang) or f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@tlgbot.on(events.CallbackQuery(pattern="edit_yesterday|edit_yesterday_events|cancel_edit_yesterday"))
@require_diary_user
async def handle_yesterday_editing(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    data = event.data.decode("utf-8")
    logger.debug(f"[YESTERDAY] Edit handler called with data: {data}, user_id: {user_id}")
    logger.debug(f"[YESTERDAY] Event type: {type(event)}")
    logger.debug(f"[YESTERDAY] Event sender_id: {event.sender_id}")
    logger.debug(f"[YESTERDAY] Event chat: {getattr(event, 'chat', None)}")
    logger.debug(f"[YESTERDAY] Event message ID: {getattr(event.message, 'id', None) if hasattr(event, 'message') else None}")
    
    if data == "cancel_edit_yesterday":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.debug(f"[YESTERDAY] Processing cancel_edit_yesterday action")
        try:
            await event.edit(tlgbot.i18n.t('edit_canceled', lang=lang) or "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            logger.debug(f"[YESTERDAY] Successfully edited message with cancel confirmation")
        except Exception as e:
            logger.error(f"[YESTERDAY] Error in cancel_edit_yesterday: {str(e)}")
            try:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–æ–≤—ã–º
                await event.respond(tlgbot.i18n.t('edit_canceled', lang=lang) or "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                logger.debug(f"[YESTERDAY] Sent new message as fallback for cancel confirmation")
            except Exception as e2:
                logger.error(f"[YESTERDAY] Failed to send response message: {str(e2)}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        if user_id in user_states:
            del user_states[user_id]
        if user_id in user_form_data:
            del user_form_data[user_id]
            
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∑–∞–≤–µ—Ä—à–∞—è —Å–æ–±—ã—Ç–∏–µ
        await event.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return True  # –û–±–æ–∑–Ω–∞—á–∞–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        from core.database.manager import DatabaseManager
        from cfg.config_tlg import DAYLOG_DB_PATH
        
        db = DatabaseManager(db_path=DAYLOG_DB_PATH)
        yesterday_date = date.today() - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ –¥–∞–Ω–Ω—ã–µ
        entry = db.get_diary_entry(user_id, yesterday_date)
        
        if not entry:
            await event.edit(tlgbot.i18n.t('entry_not_found', lang=lang) or "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
        if data == "edit_yesterday_events":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏–π
            user_form_data[user_id] = {
                "entry_date": yesterday_date,
                "edit_mode": True,
                "edit_events_only": True,  # –ú–∞—Ä–∫–µ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π
                "mood": entry.get("mood", ""),
                "weather": entry.get("weather", ""),
                "location": entry.get("location", ""),
                "events": entry.get("events", "")
            }
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
            user_states[user_id] = FormState.WAITING_EVENTS
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ
            current_events = user_form_data[user_id].get("events", "")
            if not current_events:
                current_events = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            
            edit_events_message = tlgbot.i18n.t('edit_events_prompt', lang=lang, events=current_events)
            if not edit_events_message:
                edit_events_message = f"–í—á–µ—Ä–∞—à–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n{current_events}.\n\n–û–ø–∏—à–∏—Ç–µ —Å–æ–±—ã—Ç–∏—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
            
            logger.debug(f"Showing events edit form in main handler for user {user_id} with edit_events_only=True")
            
            await event.edit(
                edit_events_message,
                buttons=get_events_keyboard(lang, edit_mode=True)
            )
            return
        
        # –ò–Ω–∞—á–µ –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        user_form_data[user_id] = {
            "entry_date": yesterday_date,
            "edit_mode": True,
            "mood": entry.get("mood", ""),
            "weather": entry.get("weather", ""),
            "location": entry.get("location", ""),
            "events": entry.get("events", "")
        }
        
        # –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Ç–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        user_states[user_id] = FormState.WAITING_MOOD
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ
        current_mood = user_form_data[user_id].get("mood", "")
        if not current_mood:
            current_mood = tlgbot.i18n.t('not_specified', lang=lang) or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        edit_mood_message = f"–í—á–µ—Ä–∞—à–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:\n\n{current_mood}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:"
            
        await event.edit(
            edit_mood_message,
            buttons=get_mood_keyboard(lang)
        )
        
    except Exception as e:
        import traceback
        traceback_str = traceback.format_exc()
        logger.error(f"ERROR in edit handler: {traceback_str}")
        await event.edit(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
@tlgbot.on(events.CallbackQuery(pattern="cancel_creation"))
async def cancel_creation_handler(event):
    user_id = event.sender_id
    user = getattr(tlgbot, 'settings', None).get_user(user_id) if getattr(tlgbot, 'settings', None) else None
    lang = getattr(user, 'lang', None) or 'ru'
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.debug(f"[YESTERDAY] Cancel creation handler called for user {user_id}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_form_data:
        del user_form_data[user_id]
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç–º–µ–Ω–µ
    await event.edit(tlgbot.i18n.t('creation_canceled', lang=lang) or "üëå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return